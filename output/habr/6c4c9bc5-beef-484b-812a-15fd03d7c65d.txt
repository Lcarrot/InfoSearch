<div>
 <div class="article-formatted-body article-formatted-body article-formatted-body_version-2">
  <div xmlns="http://www.w3.org/1999/xhtml">
   <p>Любая программная задача, чтобы&nbsp;быть успешно решенной, разбивается на&nbsp;этапы, итерации, подходы и&nbsp;т.&nbsp;д. Наш случай&nbsp;— не&nbsp;исключение. Создание любого сложного инженерного продукта включает определенный набор шагов. Предлагаем рассмотреть этот процесс и решение его ключевых этапов.</p>
   <p>Базовые требования обертки ядра от&nbsp;C3D Labs включают:</p>
   <ul>
    <li><p>Поддерживаемость&nbsp;— любые изменения в&nbsp;ядре автоматически отражаются в&nbsp;обертке;</p></li>
    <li><p>Масштабирование&nbsp;— расширение обертки;</p></li>
    <li><p>Кроссплатформенность&nbsp;— по&nbsp;количеству компиляторов на&nbsp;разных операционных системах обертка должна удовлетворять тем&nbsp;же требованиям, что&nbsp;и ядро C3D.</p></li>
   </ul>
   <p>Отметим, что&nbsp;первые две задачи должны выполняться&nbsp;быстро и зеркально.</p>
   <p>Одна из&nbsp;задач в&nbsp;разработке современных программных продуктов (далее ПП, прим.)&nbsp;— снижение порога вхождения. Ее решением может&nbsp;быть, например, документация, снабженная большим количеством примеров, развитая техподдержка или&nbsp;возможность использования ПП на&nbsp;нескольких языках программирования. Такой подход облегчает возможности использования инженерных решений специалистами разных профилей.</p>
   <p>Нужно отметить, что&nbsp;на&nbsp;данный момент уже существует обертка для&nbsp;языка C#, которая написана с&nbsp;использованием технологии C++/CLI. У&nbsp;этого решения существует ограничение: библиотеку нельзя использовать для&nbsp;иных систем кроме Windows. Также у&nbsp;неё достаточно сильно ограничена поддержка, т.к. исправления и доработки не&nbsp;автоматизированы. Именно поэтому подход в&nbsp;формировании оберток ядра подвергся изменениям.</p>
   <p>Для&nbsp;унификации процесса нами принято решение создавать обертки в&nbsp;стиле языка Си. Такая обертка может применяться самостоятельно как&nbsp;в&nbsp;Си, так и в&nbsp;С++ приложениях. Также она является промежуточным звеном для&nbsp;формирования более высокоуровневых оберток, например, для&nbsp;языка C# с&nbsp;использованием технологии P/Invoke. Это, в&nbsp;свою очередь, позволяет производить сборку ядра как&nbsp;для&nbsp;Windows, так и для&nbsp;Linux систем.</p>
   <p>Рассмотрим процесс создания обертки в&nbsp;стиле Си для&nbsp;библиотеки геометрического ядра C3D Labs. Он состоит из&nbsp;нескольких этапов.</p>
   <ol>
    <li><p>Создание обертки в&nbsp;стиле Си (прототип без&nbsp;автоматизации для&nbsp;тестирования жизнеспособности);</p></li>
    <li><p>Парсинг заголовочных файлов С++ на&nbsp;сущности языка;</p></li>
    <li><p>Разработка правил формирования обертки;</p></li>
    <li><p>Написание генератора Си обертки;</p></li>
    <li><p>Формирование и сборка обертки ядра генератором.</p></li>
   </ol>
   <p>На&nbsp;первом (1) этапе по&nbsp;ограниченному набору файлов создается обертка в&nbsp;стиле СИ с&nbsp;целью проверки работоспособности и формирования ряда правил для&nbsp;будущего генератора обертки.</p>
   <figure class="">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/8d2/b06/598/8d2b06598904710698db2460fec8b565.png" width="411" height="90" data-src="https://habrastorage.org/getpro/habr/upload_files/8d2/b06/598/8d2b06598904710698db2460fec8b565.png">
    <figcaption></figcaption>
   </figure>
   <p>На втором (2) этапе задействуется библиотека clang, которая разбирает заголовочный файл в представление AST (abstract syntax tree). Полученное представление clang сохраняется в структуры данных языка Python (для использования генератором обертки, написанным на Python).</p>
   <p>На третьем (3) этапе формируется набор правил обработки структур данных С++.</p>
   <figure class="">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c51/f96/6d2/c51f966d29778a60df45f727d4c78862.png" width="411" height="90" data-src="https://habrastorage.org/getpro/habr/upload_files/c51/f96/6d2/c51f966d29778a60df45f727d4c78862.png">
    <figcaption></figcaption>
   </figure>
   <p>На&nbsp;четвертом этапе (4) используются результаты работы парсера и набор правил формирования.</p>
   <p>Генератор работает следующим образом:</p>
   <ul>
    <li><p>получает на&nbsp;вход заголовочный файл C++;</p></li>
    <li><p>запускает парсер по&nbsp;файлу и получает представление структур данных в&nbsp;сущностях языка Python;</p></li>
    <li><p>формирует «заготовку»&nbsp;— файл со специальными функциями для&nbsp;создания/удаления объектов (классов, структур) библиотеки и функций доступа к&nbsp;родительским классам;</p></li>
    <li><p>проходя по&nbsp;сущностям из&nbsp;парсера, обрабатывает код согласно правилам и формирует соответствующие функции.</p></li>
   </ul>
   <p>Результатом работы генератора является пара файлов (заголовочный и исполняемый коды) по&nbsp;входному заголовочному файлу.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/afd/335/29c/afd33529c3312c4e7da319a0e08c42e1.png" alt="Рабочий цикл генератора" title="Рабочий цикл генератора" width="761" height="210" data-src="https://habrastorage.org/getpro/habr/upload_files/afd/335/29c/afd33529c3312c4e7da319a0e08c42e1.png">
    <figcaption>
     Рабочий цикл генератора
    </figcaption>
   </figure>
   <p>При&nbsp;формировании обертки встречаются некоторые ограничения:</p>
   <ul>
    <li><p>функции со значениями по&nbsp;умолчанию преобразуются в&nbsp;функции с&nbsp;явным указанием параметра;</p></li>
    <li><p>для&nbsp;шаблонных классов выбираются конкретные реализации параметров, используемые в&nbsp;API оборачиваемой библиотеки;</p></li>
    <li><p>все методы и функции, переопределенные в&nbsp;исходном заголовочном файле, формируются с&nbsp;перечислением параметров в&nbsp;имени функции обертки.</p></li>
   </ul>
   <p>На&nbsp;пятом (5) этапе выполняется формирование обертки генератором по&nbsp;набору заголовочных файлов. Далее весь результирующий набор файлов вместе с&nbsp;реализацией шаблонных классов собираются в&nbsp;один проект для&nbsp;построения библиотеки обертки. На&nbsp;этом этапе используются cmake‑файлы для&nbsp;конфигурации сборки.</p>
   <p>В&nbsp;результате мы получаем библиотеку обертки, которая может&nbsp;быть использована как&nbsp;основа для&nbsp;последующего уровня обертки (С#, Python) или&nbsp;как&nbsp;самостоятельный продукт. Также упрощается процесс сопровождения и модификации обертки, поскольку генерация по&nbsp;измененному коду ядра автоматически включает все изменения.</p>
   <p>В&nbsp;наших дальнейших планах&nbsp;— автоматизация процесса генерации и сборки обертки в&nbsp;стиле Си (например, при&nbsp;выходе релиза основной библиотеки), формирование C# обертки на&nbsp;её основе, выпуск вышеуказанных оберток для&nbsp;Linux и Windows.</p>
   <div class="persona" persona="true">
    <img persona="true" class="image persona__image" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/6bf/fe9/479/6bffe94790df65ae262e96bfc9b1e918.png" data-src="https://habrastorage.org/getpro/habr/upload_files/6bf/fe9/479/6bffe94790df65ae262e96bfc9b1e918.png">
    <h5 class="persona__heading" persona="true">Максим Пылаев</h5>
    <p>Инженер-программист C3D Labs</p>
   </div>
   <p></p>
  </div>
 </div>
</div> <!----> <!---->