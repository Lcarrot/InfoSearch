<div>
 <div class="article-formatted-body article-formatted-body article-formatted-body_version-2">
  <div xmlns="http://www.w3.org/1999/xhtml">
   <p>Несмотря на&nbsp;немного биологический заголовок, в&nbsp;этом посте мы обсудим старые добрые продуктовые проблемы. Меня зовут Александр Федюнин, я пришел в&nbsp;Спортмастер в 2019&nbsp;системным аналитиком, а&nbsp;сейчас&nbsp;— PL продукта «SM 3.0», о&nbsp;котором вы могли читать в&nbsp;предыдущих постах нашего блога. Я расскажу вам, как&nbsp;мы пытались придумать что‑то новое, чтобы&nbsp;быстро решить проблему с&nbsp;ресурсами и не&nbsp;потерять в&nbsp;скорости и качестве разработки.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/3cb/b86/5c8/3cbb865c88aca97c67d659df99d888b2.jpg" alt="" title="" width="1280" height="720" data-src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/3cb/b86/5c8/3cbb865c88aca97c67d659df99d888b2.jpg" data-blurred="true">
    <figcaption></figcaption>
   </figure>
   <h3>Исторический экскурс</h3>
   <p>Начнем с&nbsp;того, что&nbsp;продуктовый подход как&nbsp;сущность&nbsp;был придуман маркетологами. В 1932&nbsp;году Нил Макелрой, который работал в&nbsp;Procter &amp; Gamble, решил, что&nbsp;стандартных маркетинговых инструментов ему уже не&nbsp;хватает, а&nbsp;более плотно развивать пользовательский опыт хочется. Он в&nbsp;то время как&nbsp;раз отвечал за&nbsp;продвижение мыла марки Camay. Как&nbsp;вы понимаете, продвигалось оно неплохо.</p>
   <p>Другой важный этап в&nbsp;развитии продуктового подхода&nbsp;— опыт Hewlett‑Packard. Эти ребята в&nbsp;свое время решили, что&nbsp;чем ближе клиент (или конечный пользователь продукта) к&nbsp;точке принятия решения по&nbsp;этому продукту, тем успешнее будет сам продукт. И стали создавать команды, такие мини‑организации, которые полностью отвечали за&nbsp;весь цикл выпуска продукта, от&nbsp;идеи до&nbsp;выхода на&nbsp;рынок. А&nbsp;если численность такой организации начинала подкрадываться к 500&nbsp;человек, ее делили на&nbsp;более мелкие части.</p>
   <p>А&nbsp;ещё&nbsp;был послевоенный опыт Toyota, когда в&nbsp;ресурсах&nbsp;был жуткий дефицит, и компания приняла решение выпускать машины непосредственно под&nbsp;заказчика&nbsp;— just in time. Производственная система Toyota TPS&nbsp;— всем известна её основа, kaizen, которые стал отправной точкой для&nbsp;множества других полезных фреймворков.</p>
   <p>Первый&nbsp;же продуктовый подход именно в&nbsp;разработке ПО&nbsp;— это компания Intuit (1983) и ее продукт Quicken. Бухгалтерский софт для&nbsp;ведения домашней бухгалтерии,&nbsp;был выполнен в&nbsp;формате стандартной чековой книжки и ориентирован на&nbsp;обычных домохозяек, а&nbsp;не&nbsp;матерых бухгалтеров. Ребята из&nbsp;Intuit придумали свою программу, в&nbsp;рамках которой специалисты компании ходили по&nbsp;домам пользователей и смотрели, как&nbsp;они устанавливают этот софт, работают с&nbsp;ним. А&nbsp;затем на&nbsp;основе этого вырабатывали решения по&nbsp;продвижению продукта.</p>
   <p>В 1990-х Microsoft и другие крупные компании осознали, что&nbsp;тимлидам дико сложно согласовывать технические детали с&nbsp;заказчиками и конечными пользователями, нужен&nbsp;был какой‑то вменяемый переводчик. Так родилась новая роль&nbsp;— program manager.</p>
   <p>В 2001&nbsp;был подписан Agile‑манифест, предрекший сокращение водопада и развитие гибких методологий. Так что&nbsp;в&nbsp;нулевых развитие продуктового подхода в&nbsp;разработке ПО&nbsp;определяли такие гиганты, как&nbsp;Google, Amazon, Apple. Требования к&nbsp;PM у&nbsp;них&nbsp;были разные, но&nbsp;главный вектор&nbsp;был довольно четко определен.</p>
   <p>В&nbsp;итоге&nbsp;— сегодня компании, которые создают ПО, при&nbsp;продвижении и разработке своих продуктов обращают меньше внимания на&nbsp;собственное внутреннее чутье и интуицию, и больше&nbsp;— на&nbsp;желание клиента.</p>
   <p>Всё это привело к&nbsp;тому, что&nbsp;продуктовый подход оброс кучей историй и мемов. Один из&nbsp;них и вынесен в&nbsp;заголовок&nbsp;— могут&nbsp;ли девять&nbsp;женщин за&nbsp;месяц родить ребенка? Что&nbsp;это значит на&nbsp;практике? Это ситуация, когда насыщение ресурсами всегда имеет какую‑то конечную точку своей эффективности, больше которой вливать ресурсы бесполезно. От&nbsp;этого не&nbsp;станет лучше, никто не&nbsp;выпустит продукт&nbsp;быстрее и прочее.</p>
   <p>Самый просто пример&nbsp;— строительство. Если бетон должен застывать, например, неделю, то тут как&nbsp;ни спеши&nbsp;— раньше он не&nbsp;застынет.</p>
   <h3>А что если...</h3>
   <p>Вдруг в&nbsp;наш цифровой век что‑то поменялось, и мем про&nbsp;девятерых&nbsp;женщин более не&nbsp;актуален? Давайте разберем это на&nbsp;примере нашей истории из&nbsp;жизни.</p>
   <p>Год назад мы с&nbsp;командой внедряли интернет‑магазин Funday. Все шло хорошо, мы стали настоящей командой, разогнались, дела пошли в&nbsp;гору и вообще.</p>
   <p>Но&nbsp;тут кое‑что пошло не&nbsp;так.</p>
   <p>В&nbsp;конце апреля внезапно уволился один из&nbsp;наших фронтенд‑разработчиков (ведущий). В&nbsp;целом это нормально, так&nbsp;бывает, люди приходят и уходят. У&nbsp;каждой команды на&nbsp;этот счет должен&nbsp;быть план Б. У&nbsp;нас он тоже&nbsp;был&nbsp;— сократили внепоток, увеличили время на&nbsp;обработку, к&nbsp;счастью, не&nbsp;очень частых инцидентов, уменьшили ряд регулярных активностей. А&nbsp;я сразу пошел к&nbsp;бизнес‑заказчику и сказал, что&nbsp;у&nbsp;нас тут небольшой форс‑мажор, возможно, просядем в&nbsp;паре мест. Обговорили на&nbsp;берегу, что&nbsp;это за&nbsp;места и где именно можем просесть. Минус один разраб, с&nbsp;кем не&nbsp;бывает.</p>
   <p>А&nbsp;затем я внезапно вспомнил, что&nbsp;после майских праздников наш второй фронтенд‑разработчик должен&nbsp;был улетать в&nbsp;отпуск, уже и билеты давно купил, путевки. Ну что&nbsp;ж, минус два разраба, становится немножко напряженнее. Мы сели, подумали, решили немного снизить вип‑лимиты. Я включил глаза кота из&nbsp;Шрека и снова пошел к&nbsp;бизнес‑заказчику, мол, помните, я говорил, что&nbsp;может случиться подобное? А&nbsp;вот и оно! Но&nbsp;не&nbsp;переживайте, все ОК, HR в&nbsp;курсе, уже ищут замену, да&nbsp;и вообще у&nbsp;нас третий разраб есть, отличный фронт.</p>
   <p>У&nbsp;которого в&nbsp;середине мая рождается первенец, и парня тоже приходится отпустить с&nbsp;работы. И вот уже на&nbsp;этот случай у&nbsp;меня плана не&nbsp;было. Конечно, у&nbsp;нас&nbsp;был один фуллстек‑разработчик, но&nbsp;он&nbsp;был на&nbsp;все 100&nbsp;занят другой задачей.</p>
   <p>В&nbsp;общем, пришлось погружаться в&nbsp;полный t‑shape.</p>
   <p>У&nbsp;нас&nbsp;был разработчик, который настраивал нам конвейер и занимался инфраструктурой. В&nbsp;текущей ситуации пришлось на&nbsp;время забыть о&nbsp;конвейере и вспомнить основы Vue. Системный аналитик начал программировать, а&nbsp;я вспомнил молодость и стал системно анализировано. Бизнес, конечно,&nbsp;был опечален, но&nbsp;не&nbsp;сломлен.</p>
   <h3>&nbsp;— Саша, где девять женщин-то?</h3>
   <p>Почти‑почти подобрались к&nbsp;сути. Работая в&nbsp;таких условиях, я заметил одну особенность&nbsp;— у&nbsp;нас кратно возрос lead time по&nbsp;задачам. Мы&nbsp;же снизили&nbsp;лимиты, задач стало меньше, но&nbsp;они&nbsp;же не&nbsp;должны&nbsp;были стать больше. Мы очень активно обсудили это на&nbsp;ретро. Обошлось без&nbsp;рукоприкладства, спасибо удалёнке. И решили, что&nbsp;в&nbsp;поток начинают заходить очень большие задачи. Видимо, у&nbsp;нас что‑то не&nbsp;так с&nbsp;декомпозицией.</p>
   <p>Наша команда проходила обучение по&nbsp;правилам декомпозиции, мы начали штудировать свои конспекты, вспоминать, что&nbsp;там вообще&nbsp;было. Мы пересмотрели каждую композицию на&nbsp;предмет декомпозиции, благо их&nbsp;было не&nbsp;так чтобы много.</p>
   <p>И ничего криминального не&nbsp;нашли, рубить задачи на&nbsp;более мелкие куски просто не&nbsp;было технической возможности. Например, функционал по&nbsp;выбору способа получения товара у&nbsp;нас&nbsp;был и на&nbsp;карточке товара, и в&nbsp;корзине, и в&nbsp;чекауте. Мы, конечно, могли&nbsp;бы сначала сделать это на&nbsp;карточке товара, скажете вы, потом выпустить функционал, продолжить с&nbsp;корзиной и далее закончить на&nbsp;чекауте.</p>
   <p>Но&nbsp;это все сломалось&nbsp;бы на&nbsp;втором шаге.</p>
   <p>Поэтому процесс разработки у&nbsp;нас выглядел так.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/483/543/f73/483543f7349eb46a628c563ae885b3ee.png" alt="" title="" width="1600" height="776" data-src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/483/543/f73/483543f7349eb46a628c563ae885b3ee.png">
    <figcaption></figcaption>
   </figure>
   <p>Сначала разработчик брал кусок для&nbsp;карточки товара, потом для&nbsp;корзины, потом для&nbsp;чекаута. потом шло довольно длинное ревью, длинный процесс разработки, после ошибок и недоработок&nbsp;— еще одно ревью.</p>
   <p>Затем тестировщик брал огромный кусок кода, тестировал его, дорабатывал и снова тестировал. И, если все ОК, на&nbsp;второй или&nbsp;третьей итерации у&nbsp;нас получался релиз.</p>
   <p>Меня смущали вот эти три квадрата.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/107/edc/dcb/107edcdcb45222595ae74fcca1173515.png" alt="" title="" width="797" height="460" data-src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/107/edc/dcb/107edcdcb45222595ae74fcca1173515.png">
    <figcaption></figcaption>
   </figure>
   <p>И я начал думать, что&nbsp;с&nbsp;ними сделать. Как&nbsp;раз в&nbsp;то время наша команда внедрила механизм фиче‑тогглинга и A/B‑тестирования на&nbsp;продукте. Продукт созрел, а&nbsp;бизнес жаждал.</p>
   <p>Я подумал, что&nbsp;эти механизмы могут нам помочь&nbsp;— если использовать фиче‑тогглы не&nbsp;только для&nbsp;синхронизации разработки бизнес‑функционала, но&nbsp;и чтобы как‑то развязать разработку с&nbsp;технической точки зрения, чтобы можно&nbsp;было шарить работы между несколькими разработчиками.</p>
   <p>Вообще, я такого не&nbsp;делал никогда и даже слышал не&nbsp;так много о&nbsp;подобном подходе. Но&nbsp;выбор&nbsp;был довольной простой&nbsp;— спокойной объявить дефолт или&nbsp;рискнуть и попробовать. И мы решили рискнуть.</p>
   <p>Мы ускорили внедрение функционала, плюс я подключил бэк‑разработчика, решил, что&nbsp;тут он будет полезнее. Нам нужно&nbsp;было определить критерии применимости такой схемы.</p>
   <p>И оказалось, что&nbsp;применять такой подход можно много где, ведь у&nbsp;нас на&nbsp;пользовательском пути все по‑хорошему однообразно. В&nbsp;итоге после этого мы определили новые принципы технической декомпозиции, чтобы с&nbsp;точки зрения кода можно&nbsp;было&nbsp;бы этот код легко разобрать, а&nbsp;потом собрать.</p>
   <p>В&nbsp;этом смысле разработка у&nbsp;нас должна&nbsp;была начать выглядеть так.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/1d7/942/852/1d794285266618dee40d8417cc8edd8d.png" alt="" title="" width="1600" height="761" data-src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/1d7/942/852/1d794285266618dee40d8417cc8edd8d.png">
    <figcaption></figcaption>
   </figure>
   <p>Мы заводим фиче‑тогглы на&nbsp;это, три разработчика берут каждый по&nbsp;своему куску и делают их (делают&nbsp;быстрее, ведь куски меньше), плюс разработчики погружены в&nbsp;контекст, ревью проходит&nbsp;быстрее. А&nbsp;тестировщики могут шарить куски кода между собой, так тестирование проходит&nbsp;быстрее. Потом по&nbsp;фиче‑тогглам мы все это собираем и релизим. Судя по&nbsp;графику, все это должно занимать меньше времени.</p>
   <h3>Результаты</h3>
   <p>Нас колбасило весь июнь. Мы притирались, все‑таки, новая методология, какие‑то ошибки и проблемы. Но&nbsp;к&nbsp;концу месяца мы вышли на&nbsp;докризисный уровень. А&nbsp;потом оно просто заработало и продолжает хорошо работать с&nbsp;переменным, но&nbsp;неизменным успехом.</p>
   <p>Что&nbsp;же получается? Мы изобрели вечный двигатель в&nbsp;мире гибких методологий? Я так думал в&nbsp;самом начале, пока не&nbsp;перешел в&nbsp;конце августа в&nbsp;другую команду и не&nbsp;попробовал принести и туда всё доброе, светлое и прогрессивное.</p>
   <p>Но&nbsp;у этого метода, как&nbsp;выяснилось,&nbsp;были ограничения.</p>
   <p>Во‑первых, на&nbsp;funday&nbsp;был один аналитик, значит, вся экспертиза по&nbsp;анализу в&nbsp;одних руках. Так&nbsp;было проще для&nbsp;всех. Во‑вторых, на&nbsp;funday не&nbsp;было бэка. Ну, в&nbsp;целом он&nbsp;был, но&nbsp;мы его использовали в&nbsp;качестве стороннего API. Ну и в‑третьих, такой подход требовал большего микроменеджмента.</p>
   <p>Так что&nbsp;в&nbsp;такой большой команде, как&nbsp;SM 3.0, это просто не&nbsp;взлетело&nbsp;— много участников, много стейкхолдеров, много заказчиков. Может&nbsp;быть, просто не&nbsp;пришло время. Может&nbsp;быть, надо&nbsp;было где‑то что‑то подправить, и все&nbsp;бы получилось.</p>
   <p>Получилось или&nbsp;нет у&nbsp;меня оправдать заголовок&nbsp;— решать вам. В&nbsp;любом случае, я убедился, что&nbsp;в&nbsp;командах, подобных Funday, такое возможно. Это, конечно, не&nbsp;выглядит массовым рецептом или&nbsp;панацеей, но&nbsp;мне не&nbsp;хочется забегать вперед и давать окончательный вердикт насчет этого. Ведь если мы знаем ограничения, то мы можем подстроить под&nbsp;них наш процесс. Вспомним Тойоту и HP. В&nbsp;конце концов, можно формировать команды, подходящие под&nbsp;эту концепцию, и успешно развивать продукт. А&nbsp;может, можно выйти за&nbsp;рамки привычного, хорошо поразмыслив, и, подобно Нилу Макелрою и ребятам из&nbsp;Intuit, совершить революцию? Кто знает…</p>
   <p></p>
  </div>
 </div>
</div> <!----> <!---->