<div>
 <div class="article-formatted-body article-formatted-body article-formatted-body_version-2">
  <div xmlns="http://www.w3.org/1999/xhtml">
   <p>Привет! Меня зовут Дима Вагин, я бэкенд-инженер в Авито. Сегодня расскажу, как мы работаем с БД PostgreSQL из Go. Покажу, какие библиотеки и пулеры соединений мы используем для доставки в код параметров подключения и как мы их настраиваем. А ещё расскажу про проблемы, к которым приводит отмена контекста, и о том, как мы с ними справляемся.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w780q1/getpro/habr/upload_files/a13/ee4/24a/a13ee424a75adc176adf747f60151559.jpg" width="1560" height="880" data-src="https://habrastorage.org/getpro/habr/upload_files/a13/ee4/24a/a13ee424a75adc176adf747f60151559.jpg" data-blurred="true">
    <figcaption></figcaption>
   </figure>
   <h3>Доставка паролей и параметров подключения в продакшн</h3>
   <p>Прежде чем подключаться к PostgreSQL, нужно определиться, как безопасно и удобно передавать пароли от БД и параметры подключения.</p>
   <p>Вот, как предлагает подключаться к PostgreSQL одна из первых ссылок в гугле:</p>
   <pre><code class="go">package main

import (
    "database/sql"
    "fmt"
  
    _ "github.com/lib/pq"
)

const (
    host     = "localhost"
    port     = 5432
    user     = "postgres"
    password = "your-password"
    dbname   = "calhounio_demo"
)

func main() {
    psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
        "password=%s dbname=%s sslmode=disable",
        host, port, user, password, dbname)
    db, err := sql.Open("postgres", psqlInfo)
    if err != nil {
        panic(err)
    }
    defer db.Close()
  
    err = db.Ping()
    if err != nil {
        panic(err)
    }
  
    fmt.Println("Successfully connected!")
}</code></pre>
   <p>Тут сразу бросается в глаза ряд очевидных проблем: откуда брать пароли и параметры подключения? Просто закоммитить их в код нельзя: они меняются. Ещё есть не совсем очевидные проблемы: соединение с базой проверяется только единожды, и не экранируется пароль.</p>
   <p>Мы используем простую обвязку, которую написали сами. Вот так выглядит подключение у нас в коде:</p>
   <pre><code class="go">package main

import (
    "fmt"

    "go.avito.ru/gl/psql/v4"
)

func main() {
    db, err := psql.Connect(psql.WithConnectionWaiting())
    if err != nil {
        panic(err)
    }
    defer db.Close()
  
    fmt.Println("Successfully connected!")
}
</code></pre>
   <p>Такая обвязка решает проблему с паролями и подключением:</p>
   <ul>
    <li><p>Параметры в прод доставляются через переменные окружения.</p></li>
    <li><p>Пароли автоматически подтягиваются из Vault. Разработчик без одобренного доступа их не видит.&nbsp;</p></li>
    <li><p>Происходит настройка пула драйвера.</p></li>
    <li><p>Производится проверка доступности соединения.</p></li>
   </ul>
   <p>Ещё пароль нужно периодически менять, но если изменить его на лету, приложение перестанет работать. Поэтому наша обвязка использует два логина: когда приложение задеплоено под одним пользователем, у второго меняется пароль. При следующей выкатке используемый логин поменяется. Так происходит ротация паролей.</p>
   <h3>Локальный и серверный PgBouncer</h3>
   <p>В Авито микросервисная архитектура — у нас больше 1,5 тысяч микросервисов и 500 инстансов PostgreSQL, у каждого из которых есть по 2–3 реплики. Все бэкенд-приложения на Go связаны с БД по сети при помощи пулеров соединения PgBouncer:</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/a69/782/644/a697826441e9264f92b94aec7ab61392.png" width="1968" height="1106" data-src="https://habrastorage.org/getpro/habr/upload_files/a69/782/644/a697826441e9264f92b94aec7ab61392.png">
    <figcaption></figcaption>
   </figure>
   <p>У каждого Go-приложения есть локальный (клиентский) PgBouncer, а у каждого инстанса или реплики PostgreSQL ещё по одному —&nbsp;серверному.&nbsp;</p>
   <p>Локальный PgBouncer вместе с кодом находятся внутри k8s пода. Это сделано, чтобы приложение и другие контейнеры, например, pgeon на схеме, могли не ходить за каждым коннектом к северному PgBouncer по сети.&nbsp;</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/9b6/c7d/806/9b6c7d80674844ed29432763814270d3.png" width="2056" height="1014" data-src="https://habrastorage.org/getpro/habr/upload_files/9b6/c7d/806/9b6c7d80674844ed29432763814270d3.png">
    <figcaption></figcaption>
   </figure>
   <p>Серверный PgBouncer находится в lxc-контейнере в одном из датацентров. Там же и другие приложения: например, которые собирают метрики с БД — metric-scrapper на схеме. Клиентский PgBouncer по сети соединён с серверным.</p>
   <h3>Подключение к PostgreSQL</h3>
   <p>Давайте рассмотрим на диаграммах последовательности, как происходит подключение к PostgreSQL из наших Go-приложений:</p>
   <ol>
    <li><p>В приложении вызываем db.Query().</p></li>
    <li><p>Клиентский пул драйвера подключается к локальному PgBouncer.</p></li>
    <li><p>Локальный PgBouncer подключается к серверному PgBouncer.</p></li>
    <li><p>Серверный PgBouncer подключается к PostgreSQL.</p></li>
    <li><p>PostgreSQL форкает процесс и возвращает PID и секретную строчку aka secret key.&nbsp;</p></li>
    <li><p>PID и секретная строчка доходят до пула драйвера.&nbsp;</p></li>
    <li><p>Драйвер отправляет запрос, который по цепочке доходит до базы данных.&nbsp;&nbsp;</p></li>
    <li><p>Результат возвращается в код, где мы через <code>rows.Scan()</code> и <code>Next()</code> вычитываем данные.&nbsp;</p></li>
    <li><p>Вызываем <code>rows.Close()</code>, чтобы освободить ресурсы и вернуть коннект в пул драйвера.</p></li>
   </ol>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/28e/883/709/28e883709d6137ad33ceb2c6d74c4581.png" width="1474" height="1398" data-src="https://habrastorage.org/getpro/habr/upload_files/28e/883/709/28e883709d6137ad33ceb2c6d74c4581.png">
    <figcaption></figcaption>
   </figure>
   <p>Подключение, форк и возврат PID с секретной строчкой (шаги 2–6) занимают много времени и ресурсов. На схеме видно, что непосредственно выполнение запроса происходит гораздо быстрее. Поэтому шаги 2–6 выполняются только при первом запросе.</p>
   <p><strong>Во всех последующих запросах</strong> мы используем уже существующее подключение и тот же процесс. Так выглядит повторный запрос на диаграмме последовательности:</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/68d/dbb/ba7/68ddbbba712ee87d78aabc2ecc9dd385.png" width="1538" height="958" data-src="https://habrastorage.org/getpro/habr/upload_files/68d/dbb/ba7/68ddbbba712ee87d78aabc2ecc9dd385.png">
    <figcaption></figcaption>
   </figure>
   <p><strong>Важно не забыть шаг 9 — rows.Close()</strong>, потому что иначе коннект не вернётся в пул драйвера и не сможет использоваться для других запросов, и это приведёт к отказу сервиса, если пул ограничен.</p>
   <pre><code class="go">func missingClose() {
    age := 27
    rows, err := db.Queryx("SELECT name FROM users WHERE age = ?", age)
    if err != nil {
        log.Fatal(err)
    }
    
    // defer rows.Close()
    
    names := make([]string, 0)
    for rows.Next() {
        var name string
        if err := rows.Scan(&amp;name); err != nil {
            log.Fatal(err)
        }
        names = append(names, name)
    }
    
    // Check for errors from iterating over rows.
    if err := rows.Err(); err != nil {
        log.Fatal(err)  
    }
}</code></pre>
   <p>Чтобы избегать такой ошибки, мы используем <a href="https://github.com/ryanrolds/sqlclosecheck"><u>линтер sqlclosecheck</u></a>. Он проверяет код на наличие <code>rows.Close()</code> и предупреждает об его отсутствии на этапе сборки. В коде выше линтер подскажет ошибку <code>missing_close.go:3:24: Rows/Stmt was not closed</code>.</p>
   <h3>Настройки клиентской и серверной части pgbouncer, которые мы используем в Авито</h3>
   <h4>PgBouncer на клиентской части</h4>
   <ul>
    <li><p><strong>pool_mode = transaction</strong>. В этом режиме соединение возвращается в общий пул после завершения транзакции.&nbsp;</p></li>
    <li><p><strong>pool_size = 5</strong>. Одновременно можно выполнять не больше 5 транзакций. Этого обычно достаточно: 5 бэкендов могут за 1 секунду выполнить 5000 транзакций при длине транзакции в 1 мс.</p></li>
    <li><p><strong>query_wait_timeout = 10s.</strong> При попытке выполнить транзакцию придётся ждать, пока не освободится один из бэкендов. Если время ожидания превысит 10 секунд, приложение получит ошибку <code>query_wait_timeout</code>.</p></li>
    <li><p><strong>max_client_conn = 200</strong>. Максимально разрешённое количество подключений. По умолчанию 100, мы выставляем 200.</p></li>
    <li><p><strong>client_idle_timeout = 7200. </strong>PgBouncer закрывает соединения, которые простаивают дольше 2 часов.</p></li>
   </ul>
   <h4>Пул драйвера</h4>
   <ul>
    <li><p><strong>Размер</strong> <strong>—&nbsp;5</strong>, по размеру пула локального PgBouncer:</p></li>
   </ul>
   <pre><code class="go">db.SetMaxOpenConns(5)
db.SetMaxIdleConns(5)</code></pre>
   <ul>
    <li><p><strong>Время жизни и простоя коннекта — 5 минут</strong>. Эти значения должны быть меньше <code>client_idle_timeout</code> в PgBouncer, иначе Go-драйвер может попытаться выполнить запрос на соединении, которое уже закрыто локальным PgBouncer.&nbsp;</p></li>
   </ul>
   <pre><code class="go">db.SetConnMaxLifeTime(5 * time.Minute)
db.SetConnIdleTime(5 * time.Minute)</code></pre>
   <h4>PgBouncer на серверной части</h4>
   <p>У серверного PgBouncer настройки почти такие же, как и у локального.&nbsp;</p>
   <ul>
    <li><p><code>pool_mode = transaction</code>.&nbsp;</p></li>
    <li><p><code>pool_size = 10</code>.&nbsp;</p></li>
    <li><p><code>query_wait_timeout = 15s</code>.&nbsp;</p></li>
   </ul>
   <h3>Работа с транзакциями</h3>
   <p>При работе с транзакциями мы поняли, что чем она короче —&nbsp;тем эффективнее используется база данных. Расскажу, почему так происходит и как добиться максимальной эффективности.</p>
   <h4>Короче транзакция — лучше</h4>
   <p>Это&nbsp;обычный код на Go, который работает с транзакцией. Мы открываем транзакцию, делаем запрос и коммитим.</p>
   <pre><code class="go">func tx() error {
    tx, err := db.Begin()
    if err != nil {
        return err
    }
    defer tx.Rollback()
    
    _, err = tx.Exec("update t set age = age + 1 where user_id = $1", 10)
    if err != nil {
        return err
    }
    
    row := tx.QueryRow("select * from t where user_id = $1", 10)
    if row.Err() != nil {
        return err
    }
    
    // ...
    
    _ = tx.Commit()
    
    return nil
}
</code></pre>
   <p>Это работа того же кода на диаграмме последовательности. Обратите внимание, что локального PgBouncer нет на схеме. На самом деле он есть, но не влияет на результат и усложняет схему.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/221/d47/d5b/221d47d5b68d395cd74ae4b453e58806.png" width="1098" height="1552" data-src="https://habrastorage.org/getpro/habr/upload_files/221/d47/d5b/221d47d5b68d395cd74ae4b453e58806.png">
    <figcaption></figcaption>
   </figure>
   <p>Реальное время работы БД — это лишь маленькие промежутки времени, которые на диаграмме отмечены как «Выполнение запроса». Всё остальное время база простаивает: пул занят, и выполняться ничего больше не может.&nbsp;Более того, строки которые эта транзакция изменила - заблокированы, и параллельные транзакции которым тоже надо изменить эти строки вынуждены дожидаться её завершения.</p>
   <p>Заблокированные строки и пул освободятся, только когда мы сделаем коммит. Значит, нужно сократить время между началом транзакции и коммитом.&nbsp;</p>
   <p><strong>Вывод: чем короче транзакция, тем лучше</strong>. При короткой транзакции БД меньше простаивает в бесполезном ожидании, а значит вы можете выполнять больше запросов в единицу времени.&nbsp;</p>
   <h4>Способы сократить транзакцию</h4>
   <p>Чтобы сделать транзакцию короче, мы используем:</p>
   <ul>
    <li><p><code>returning</code>.</p></li>
    <li><p>Общие табличные выражения (CTE).</p></li>
    <li><p>Хранимые процедуры.</p></li>
   </ul>
   <p>Давайте немного перепишем код выше:</p>
   <pre><code class="go">func tx() error {
    row := tx.QueryRow(
        "update t set age = age + 1 where user_id = $1 returning *", 10)
    if row.Err() != nil {
        return err
    }
        
    // .....
    
    return nil
}</code></pre>
   <p>Как вы видите, транзакция стала значительно короче. Значит, можно выполнять больше запросов в единицу времени.</p>
   <h3>Новое соединение внутри транзакции</h3>
   <p>Довольно распространённая ошибка —&nbsp;попытка выделить ещё один коннект из пула внутри транзакции. В коде это выглядит так:</p>
   <pre><code class="go">package main

func tx() error {
    tx, err := db.Begin()
    if err != nil {
        return err
    }
    defer tx.Rollback()
        
    _, err = tx.Exec(“update t set age = age + 1 where user_id - $1”, 10)
    if err != nil {
        return err
    }

    // тут ошибочное использование db вместо tx
    row := db.QueryRow(“select * from t where user_id = $1”, 10)
    if row.Err() != nil {
        return err
    }

    _ = tx.Commit()

    return nil
}</code></pre>
   <p>Такая ошибка может приводить к deadlock. Транзакция не может завершиться, потому что нужно выполнить запрос. А он не обрабатывается, потому что пул занят и не может выделить ему коннект.</p>
   <p>Попытки создать новое соединение внутри транзакции можно отслеживать статическим анализатором. Но только в теории — его пока никто не написал.</p>
   <p>У меня есть самописный линтер который я реализовал на одном из внутренних хакатонов в Авито. Он проверяет простейшие случаи. Но профита от него в реальных сценариях мало. Вызов db.Query может оказаться глубоко внутри — например, на десятом уровне вложенности в каком-нибудь репозитории.&nbsp;</p>
   <p>Без линтера приходится либо отсматривать, нет ли <code>db.Query()</code> внутри транзакции, либо обкладывать всё тайм-аутами.</p>
   <h3>Отмена запроса при отмене контекста</h3>
   <p>Отмена запроса при отмене контекста — не самая очевидная штука в Golang, которая удивляет тех, кто раньше не работал из Go с PostgreSQL. Рассмотрим на конкретном примере.</p>
   <pre><code class="go">func getSomeData(ctx context.Context) error {
    rows, err := db.QueryContext(ctx, "select * from t")
    if err != nil {
        return err
    }
    defer rows.Close()
    // ...
    return nil
}</code></pre>
   <p>Здесь мы в <code>db.QueryContext()</code> передаём контекст, который приходит из хэндлера. Если хэндлер отвалится по таймауту, контекст отменится, а это приведёт к отмене запроса.&nbsp;</p>
   <p>Давайте разберёмся, почему так происходит, почему мы в итоге отключили этот механизм и как с ним лучше работать.</p>
   <h4>Почему отменяется запрос при отмене контекста</h4>
   <p>Возможность отменять запущенный запрос есть наверное в каждой СУБД, это не является чем-то особенным. Этот механизм широко применяется в десктопных клиентах, таких как PgAdmin3/4, psql и DataGrip. Но то, что он применяется ещё и в драйвере go, было большим сюрпризом.&nbsp;&nbsp;</p>
   <p>Вот как работает механизм отмены запроса на диаграмме состояния:</p>
   <ol>
    <li><p>Вызываем <code>db.Query()</code>.</p></li>
    <li><p>Отменяем контекст.</p></li>
    <li><p>Драйвер создаёт новое подключение к базе данных.&nbsp;</p></li>
    <li><p>Процесс СУБД форкается.</p></li>
    <li><p>Через новое подключение отправляется cancel-запрос для остановки выполнения ранее запущенного запроса.</p></li>
    <li><p>Посылается сигнал к оригинальному процессу по PID с запросом на завершение.</p></li>
    <li><p>Завершённый процесс отправляет ошибку с сообщением об отмене запроса пользователем.</p></li>
   </ol>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/44e/6ab/e69/44e6abe69583713aa46c03172cc7eeae.png" width="1532" height="1468" data-src="https://habrastorage.org/getpro/habr/upload_files/44e/6ab/e69/44e6abe69583713aa46c03172cc7eeae.png">
    <figcaption></figcaption>
   </figure>
   <p>Подробнее о том, как работает этот механизм со стороны СУБД, можно почитать в <a href="https://www.postgresql.org/docs/current/protocol-flow.html#id-1.10.6.7.10"><u>официальной документации PostgreSQL</u></a>.</p>
   <h4>Почему мы отключили отмену запросов</h4>
   <p>Мы обнаружили очень высокую нагрузку на БД в сервисе объявлений и долго не могли понять, в чём дело. У нас были только логи, заваленные сообщениями об отменённых запросах. Нормальных метрик в PgBouncer тогда ещё не было —&nbsp;они появились только в <a href="https://github.com/pgbouncer/pgbouncer/releases/tag/pgbouncer_1_18_0"><u>версии 1.18.0</u></a>, которая вышла недавно. Хотя даже и добавленных метрик мало.</p>
   <p>Оказалось, механизм отмены запроса создавал огромную нагрузку на базу данных. Из-за того, что каждый раз необходимо форкать процесс (шаг 4) и посылать дополнительный сигнал (шаг 5), вся эта процедура занимает много времени.&nbsp;</p>
   <p>А ещё периодически отменялся не тот запрос. Поскольку изначально этот механизм был придуман для IDE, никакой проверки на то, нужный ли запрос убивается, нет. Поэтому в быстрых приложениях с высоким RPS эта функциональность работает плохо.</p>
   <p>В итоге мы отключили механизм отмены запросов в критических сервисах.&nbsp;</p>
   <h4>Как обойти отмену запросов в pgx</h4>
   <p>В Авито мы используем pgx/v3 (deprecated с 2020 года) и pgx/v4. Вот, как мы справлялись с отменой запросов там.</p>
   <p><strong>В pgx/v3 можно отключить</strong> механизм отмены запросов с помощью пары строчек в коде:</p>
   <pre><code class="go">pgx.Config.CustomCancel = func(_ *pgx.Conn) error {
    return nil
}</code></pre>
   <p><strong>В pgx/v4 нельзя отключить </strong>механизм отмены запросов. На GitHub по этому поводу есть <a href="https://github.com/jackc/pgx/issues/679"><u>Issue#679</u></a>. Там в том числе отметились инженеры Reddit, Adjust, Авито.&nbsp;</p>
   <p>Поэтому чтобы обойти отмену запросов в pgx/v4, мы прокидываем пустой или изменённый контекст в запросы:</p>
   <pre><code class="go">func getSomeData(_ context.Context) error {
    ctx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
    defer cancel()
    
    rows, err := db.QueryContext(ctx, "select * from t")
    if err != nil {
        return err
    }
    defer rows.Close()
    // ...
    return nil
}</code></pre>
   <h3>Советы по использованию отмены запросов</h3>
   <p>Вот, что мы выяснили в процессе работы с отменой запросов, и что советуем вам:</p>
   <ol>
    <li><p>Используйте механизм отмены запросов для OLAP-нагрузки.</p></li>
    <li><p>Если используете отмену запросов для OLTP-нагрузки, увеличивайте таймаут.</p></li>
    <li><p>Следите за метриками и нагрузкой при использовании отмены запросов.</p></li>
    <li><p>Отслеживайте Issues в библиотеках.&nbsp;</p></li>
   </ol>
   <p><em>Предыдущая статья: </em><a href="https://habr.com/ru/company/avito/blog/716664/"><em>Как развивать внутренние сообщества с пользой для компании и людей</em></a></p>
   <p></p>
  </div>
 </div>
</div> <!----> <!---->