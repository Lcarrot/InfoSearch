<div>
 <div class="article-formatted-body article-formatted-body article-formatted-body_version-2">
  <div xmlns="http://www.w3.org/1999/xhtml">
   <p>При&nbsp;проектировании системы видеонаблюдения большого объекта потребовалось разместить камеры на&nbsp;плане, учитывая их углы обзора/наклона и получаемую плотность пикселей (необходима для&nbsp;определения <a href="https://habr.com/ru/company/ivideon/blog/458954/" rel="noopener noreferrer nofollow">зон задач</a> идентификации, распознавания и&nbsp;т.&nbsp;п.). Вcпомнил математику 8&nbsp;класса и сделал параметрический блок для&nbsp;AutoCAD, потом захотелось большего&nbsp;— чтобы прикинуть расстановку камер мог каждый&nbsp;желающий. Только&nbsp;была небольшая проблема&nbsp;— я не&nbsp;программист...</p>
   <figure class="bordered full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/d48/3c3/c1c/d483c3c1cfbaacf92405dd2c1d26610a.png" width="718" height="560" data-src="https://habrastorage.org/getpro/habr/upload_files/d48/3c3/c1c/d483c3c1cfbaacf92405dd2c1d26610a.png">
    <figcaption></figcaption>
   </figure>
   <p>БОЛЬШОЕ СПАСИБО всем тем, кто делится различными обучающими материалами&nbsp;— именно благодаря вам можно попробовать сделать что‑то новое.</p>
   <p>Статья можно сказать уровня «джунам от&nbsp;джуна» или&nbsp;немного о&nbsp;том, как&nbsp;можно написать свое приложение отличное от&nbsp;калькулятора и to‑do&nbsp;листа. Сейчас, когда смотрю на&nbsp;итоговый результат, иногда думаю: «Это точно я сделал?»:)</p>
   <details class="spoiler">
    <summary>Небольшое замечание </summary>
    <div class="spoiler__content">
     <p>На&nbsp;Хабре мы с&nbsp;братом «сидим» под&nbsp;одним ником, поэтому пусть вас не&nbsp;смущает, что&nbsp;часть статей в&nbsp;профиле написана программистом:) Он&nbsp;же мне и помогал в&nbsp;освоении JS и всячески поддерживал, хотя кажется не&nbsp;верил, что&nbsp;я доделаю проект до&nbsp;уровня, чтобы можно&nbsp;было показать не&nbsp;сильно краснея.</p>
    </div>
   </details>
   <h2>Предисловие</h2>
   <p>Листая Хабр, наткнулся на&nbsp;любопытный пост <a href="https://habr.com/ru/post/319040/" rel="noopener noreferrer nofollow">Эффективный расчёт области видимости и&nbsp;линии взгляда в&nbsp;играх</a>&nbsp;— как&nbsp;раз то что&nbsp;нужно, чтобы начать осуществлять задуманное.</p>
   <p>Решено&nbsp;— это будет SPA‑приложение, а&nbsp;для&nbsp;его создания нужно подучить JavaScript. Не&nbsp;так страшно, когда есть <a href="https://learn.javascript.ru/" rel="noopener noreferrer nofollow">Замечательный учебник</a>, статьи на&nbsp;Хабре и <a href="https://stackoverflow.com/" rel="noopener noreferrer nofollow">Stackoverflow</a>&nbsp;— место, где можно найти ответы на&nbsp;свои вопросы (не всегда верные или&nbsp;идеальные, но&nbsp;лучше, чем ничего). СSS и HTML на&nbsp;простейшем уровне я уже немного знал.</p>
   <p>Как&nbsp;оказалось, встроенный в&nbsp;JS канвас весьма <a href="https://habr.com/ru/post/111308/" rel="noopener noreferrer nofollow">примитивен</a>, и тут встретился цикл статей «Знакомимся с&nbsp;Fabric.js» <a href="https://habr.com/ru/post/162367/" rel="noopener noreferrer nofollow">1</a>, <a href="https://habr.com/ru/post/167119/" rel="noopener noreferrer nofollow">2</a>, <a href="https://habr.com/ru/post/254763/" rel="noopener noreferrer nofollow">3</a>, <a href="https://habr.com/ru/post/257401/" rel="noopener noreferrer nofollow">4</a> (это «перевод» части справки фреймворка, но&nbsp;я тогда об&nbsp;этом не&nbsp;знал). Fabric.js создает весьма удобный дополнительный слой абстракции, с&nbsp;помощью которого объекты канваса становятся JS‑объектами и манипуляции идут уже с&nbsp;ними.</p>
   <p>Можно&nbsp;было попробовать реализовывать на&nbsp;Pixijs (<a href="https://habr.com/ru/post/272233/" rel="noopener noreferrer nofollow">статья</a>), но&nbsp;я счел избыточным такой фреймворк для&nbsp;моей задачи.</p>
   <p>Так потихоньку ковыряя JS и решая простейшие математические задачи с&nbsp;помощью статей (<a href="https://habr.com/ru/post/147691/" rel="noopener noreferrer nofollow">1</a>, <a href="https://habr.com/ru/post/148325/" rel="noopener noreferrer nofollow">2</a>, <a href="https://habr.com/ru/post/547876/" rel="noopener noreferrer nofollow">3</a>), я «выпустил» <a href="http://razdel5-5.ru/CCTVcalc/" rel="noopener noreferrer nofollow">первую версию программы</a> (<a href="https://youtu.be/__bSO_7tntY" rel="noopener noreferrer nofollow">видео</a>). Ее пришлось «забросить», так как&nbsp;на&nbsp;работе засел за&nbsp;изучение новых для&nbsp;меня тем.</p>
   <h2>Спустя год</h2>
   <p>Вернувшись к&nbsp;проекту, я его критически осмотрел и понял: нужно сделать рефакторинг кода, устранить ошибки, немного улучшить внешний вид и расширить функционал. Серверную часть мне согласился написать брат (Node.js, express, SQLite).</p>
   <figure class="bordered ">
    <img src="https://habrastorage.org/getpro/habr/upload_files/a71/398/529/a713985299893d904ae3f5bd41878b13.gif" alt="Проектный подход в действии" title="Проектный подход в действии" width="282" height="513" data-src="https://habrastorage.org/getpro/habr/upload_files/a71/398/529/a713985299893d904ae3f5bd41878b13.gif">
    <figcaption>
     Проектный подход в действии
    </figcaption>
   </figure>
   <h2>Выбор инструментария</h2>
   <p>Ранее при&nbsp;создании менюшек и диалогов очень раздражали постоянные querySelector и обработка eventListner, поэтому решил, что&nbsp;нужно подучить что‑то модное, чтобы жизнь&nbsp;была веселее. Выбор пал на&nbsp;Vue 2&nbsp;(Vue.js), так как&nbsp;обещался низкий порог входа и развитое сообщество (Vue 3&nbsp;не&nbsp;рискнул именно из‑за «новизны»).</p>
   <p>Для «вкатывания» во&nbsp;Vue очень помог цикл статей <a href="https://habr.com/ru/company/ruvds/blog/514516/" rel="noopener noreferrer nofollow">Vue.js для&nbsp;начинающих</a> (ссылка на 11&nbsp;урок, так как&nbsp;в&nbsp;нем есть ссылки на&nbsp;все остальные уроки), хотя в&nbsp;комментариях писали «Для кого это? Кто не&nbsp;умеет читать документацию?!». Ну хотя для&nbsp;тех у&nbsp;кого нет опыта работы с&nbsp;другими фреймворками и еще не&nbsp;умеют читать код «фрагментами без&nbsp;обвязки».</p>
   <p>Если раньше я писал код JS в&nbsp;Atom, то с&nbsp;изучением Vue открыл для&nbsp;себя VS Code (с плагином Vetur), а&nbsp;также встроенных помощников в&nbsp;vue‑cli&nbsp;— контроля внешнего вида кода ESLint и систему сборки проекта на&nbsp;базе webpack. Для&nbsp;ведения версий файлов начал использовать GitHub Desktop. Жить стало веселее.</p>
   <p>В&nbsp;первой версии программы хранение данных у&nbsp;меня&nbsp;было в&nbsp;глобальных переменных, в&nbsp;экосистеме Vue для&nbsp;этого есть Хранилище (Store) Vuex с&nbsp;немного загадочной для&nbsp;начинающего логикой. Помогли разобраться полезные статьи и ценные комментария в&nbsp;них&nbsp;— <a href="https://habr.com/ru/post/421551/" rel="noopener noreferrer nofollow">1</a>, <a href="https://habr.com/ru/post/509904/" rel="noopener noreferrer nofollow">2</a>, <a href="https://habr.com/ru/post/440542/" rel="noopener noreferrer nofollow">3</a>. Хотя сейчас топят за <a href="https://habr.com/ru/post/666250/" rel="noopener noreferrer nofollow">pinia</a>, переписывать уже не&nbsp;стал.</p>
   <p>Очень сильно при&nbsp;отладке помогает расширение для&nbsp;браузера&nbsp;— Vue Devtools, которое добавляется в «Панель для&nbsp;разработчика».</p>
   <p>Для&nbsp;получения данных с&nbsp;API остановился на&nbsp;Axios: <a href="https://habr.com/ru/company/ruvds/blog/477286/" rel="noopener noreferrer nofollow">Axios или&nbsp;Fetch: чем пользоваться в 2019&nbsp;году?</a></p>
   <p>Для&nbsp;канваса так и остался Fabric.js.</p>
   <h2>Архитектура проекта</h2>
   <p>Ранее я не&nbsp;сильно заморачивался архитектурой (с JS&nbsp;бы совладать), но&nbsp;при&nbsp;рефакторинге стало понятно, что&nbsp;при&nbsp;создании редактора канваса нужно отделять сущности:</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/369/f98/ed2/369f98ed25bde29143df8e037e680142.png" width="1153" height="223" data-src="https://habrastorage.org/getpro/habr/upload_files/369/f98/ed2/369f98ed25bde29143df8e037e680142.png">
    <figcaption></figcaption>
   </figure>
   <ul>
    <li><p>Объекты&nbsp;—&nbsp;линии, прямоугольники, камеры и&nbsp;т.&nbsp;п., которые состоят из&nbsp;нескольких объектов fabric.js и вспомогательных данных (типа id, type и&nbsp;т.&nbsp;п.).</p></li>
    <li><p>Layout Manager&nbsp;— ничего не&nbsp;знает о&nbsp;fabric.js и о&nbsp;внутреннем устройстве объектов, а&nbsp;только манипулирует ими на&nbsp;основании id/type и публичных методов. Хранит в&nbsp;себе перечень объектов для&nbsp;канваса.</p></li>
    <li><p>Canvas Editor&nbsp;— почти ничего не&nbsp;знает об&nbsp;объектах (совсем оторвать не&nbsp;получилось и пришлось сделать пару костылей). Выкладывает на&nbsp;канвас то, что&nbsp;ему передает Layout Manager, а&nbsp;также обновляет данные в&nbsp;Хранилище. Отвечает за&nbsp;канвас и манипуляции с&nbsp;ним.</p></li>
    <li><p>Хранилище&nbsp;— хранит в&nbsp;себе информацию обо&nbsp;всех объектах проекта в&nbsp;минимальном виде, но&nbsp;только в&nbsp;глобальных координатах (а не&nbsp;координатах канваса). Так например, зоны обзора строятся каждый раз заново. Используется как&nbsp;источник данных для&nbsp;сохранения и загрузки данных проекта. Является более общим хранилищем данных, чем хранилище объектов в&nbsp;Layout Manager, так как&nbsp;содержит данные нескольких площадок (канвасов).</p></li>
   </ul>
   <p>Получилось «не очень», но&nbsp;все равно стало удобнее работать. Эх вышла&nbsp;бы немного пораньше статья <a href="https://habr.com/ru/post/680096/" rel="noopener noreferrer nofollow">Frontend архитектура MVP (Model‑View‑Presenter)</a>.</p>
   <p>Vuex разбил на&nbsp;модули по&nbsp;функционалу (а не&nbsp;как&nbsp;чаще делают по&nbsp;Actions, Mutations и&nbsp;т.&nbsp;п.):</p>
   <ul>
    <li><p>авторизация,</p></li>
    <li><p>перечень проектов,</p></li>
    <li><p>данные графического редактора (инициализируются при&nbsp;выборе проекта):</p>
     <ul>
      <li><p>перечень площадок,</p></li>
      <li><p>перечень объектов,</p></li>
      <li><p>данные для&nbsp;расчета системы хранения видеонаблюдения,</p></li>
      <li><p>настройки.</p></li>
     </ul></li>
   </ul>
   <p>Авторизация сделана на&nbsp;базе токена (строки), получаемой от&nbsp;бекенда и хранимой в&nbsp;HttpOnly coockie. Просто и незамысловато:)</p>
   <h2>Немного о Fabric.js</h2>
   <p>К&nbsp;сожалению, он хоть и дает возможность оторваться от&nbsp;манипулирования канвасом, но&nbsp;остается весьма своеобразным. Так&nbsp;линия&nbsp;— это нарисованная диагональ в&nbsp;BBox (boundary box). Все хорошо, пока не&nbsp;захочется ее отредактировать с&nbsp;помощью ручек BBox&nbsp;— толщина&nbsp;линии становится слабо управляемой. В&nbsp;итоге от&nbsp;предоставляемых ручек решено&nbsp;было отказаться и сделать свои, например, у&nbsp;меня&nbsp;линия&nbsp;— это 4&nbsp;объекта fabric.js (без отображения BBox): сама&nbsp;линия (перерисовывается при&nbsp;таскании ручек), 2&nbsp;ручки‑кружочка и вспомогательная скрытая&nbsp;линия для&nbsp;более «цепкого» выделения.</p>
   <p>Аналогично, решение для&nbsp;зумирования, <a href="http://fabricjs.com/fabric-intro-part-5" rel="noopener noreferrer nofollow">предлагаемое</a> авторами фреймворка меня не&nbsp;устроило из‑за «расплывающихся» объектов и ограниченности рабочей области. В&nbsp;итоге зумирование и панирование сделал без&nbsp;встроенных в&nbsp;фреймворк методов (путем перерасчета объектов).</p>
   <h2>Графический интерфейс</h2>
   <p>Придумать графический интерфейс с&nbsp;нуля не&nbsp;так‑то просто, как&nbsp;может показаться на&nbsp;первый взгляд.</p>
   <p>В&nbsp;первой версии я «вдохновлялся» ленточным интерфейсом от&nbsp;Microsoft&nbsp;— получилось что‑то «так себе». Поговорил со знакомым маркетологом, тот сказал&nbsp;— смотри веб‑интерфейсы программ для&nbsp;дизайнеров (figma, supa и&nbsp;т.&nbsp;п.). Посмотрел, переработал, добавил пару подсмотренных идей у&nbsp;Яндекс‑карт и конфигуратора серверов Dell:0.</p>
   <p>Конечно, можно попробовать самому сделать более‑менее симпатичные элементы интерфейса, но&nbsp;для&nbsp;pet‑проекта imho использование UI‑фреймворка более чем достаточно и&nbsp;был взят <a href="https://habr.com/ru/post/575050/" rel="noopener noreferrer nofollow">Vuetify</a> (хотя также есть альтернативный Quasar, который выглядит «корпоративненько»:) ). Благодаря Vuetify не&nbsp;пришлось хотя&nbsp;бы с&nbsp;отступами сильно возиться и адаптивностью (хотя благодаря flexbox сейчас не&nbsp;нужны всякие грязные трюки с&nbsp;CSS). Также Vuetify предоставляет элементы с&nbsp;широким функционалом настройки&nbsp;— например, data‑tables: ничего самому писать не&nbsp;надо, остается только сконфигурировать. Говорят, что&nbsp;Vuetify потихоньку <a href="https://habr.com/ru/post/709492/" rel="noopener noreferrer nofollow">помирает</a>, но&nbsp;это не&nbsp;точно.</p>
   <h2>Что еще?</h2>
   <p>Так как&nbsp;системы видеонаблюдения делаются не&nbsp;только у&nbsp;нас в&nbsp;стране, решил добавить мультиязычность (i18n)&nbsp;— <a href="https://itnan.ru/post.php?c=1&amp;p=573894" rel="noopener noreferrer nofollow">оказалось не&nbsp;так сложно</a> (к сожалению доступ к&nbsp;статье на&nbsp;Хабре закрыт, поэтому ссылка на&nbsp;сторонней ресурс «зеркало»). Программы для&nbsp;создания JSON‑файлов перевода не&nbsp;нашел, поэтому их веду в&nbsp;Excel, который мне через формулу собирает JSON‑строку, которую я уже копирую в&nbsp;файлы локализации. Так себе решение и что‑то нужно с&nbsp;эти делать, хотя&nbsp;бы кнопку в&nbsp;файле xls‑прилепить, при&nbsp;нажатии на&nbsp;которую файлики локализации будут перезаписываться:)</p>
   <p>Чтобы все&nbsp;было как&nbsp;у «взрослых» конечно&nbsp;же потребовался роутинг (работа со строкой ввода)&nbsp;— тут все стандартно Vue Router. Не&nbsp;стоит забывать, что&nbsp;пользователь может и страницу перезагрузить и кнопками браузера «вперед/назад» попользоваться.</p>
   <p>Программа предназначена больше для&nbsp;наружного видеонаблюдения (в помещениях и так примерно ясно, как&nbsp;будет показывать), поэтому добавил вставку плана из&nbsp;OpenStreetMap (OSM c OpenLayers). Если внезапно:) будет большой спрос на&nbsp;вставку карт, то можно развернуть карты на&nbsp;сервере (а не&nbsp;использовать внешний API), а&nbsp;вот за&nbsp;Google‑карты и Яндекс‑карты при&nbsp;превышениях&nbsp;лимитов уже нужно будет платить.</p>
   <p>Данные о&nbsp;камерах у&nbsp;меня есть&nbsp;— так почему&nbsp;же не&nbsp;прикрутить расчет системы хранения? Ничего сложного, только основная характеристика&nbsp;— битрейт от&nbsp;камер сильно зависит от&nbsp;снимаемой сцены. Но&nbsp;все‑таки как‑то емкость архива нужно прикидывать&nbsp;— в&nbsp;итоге нашел рекомендации Hikvision, которые и легли в&nbsp;основу расчетов.</p>
   <p>Казалось&nbsp;бы вот и все&nbsp;— приложение готово, можно и выпускаться. Какая&nbsp;же программа без&nbsp;справки? <a href="https://habr.com/ru/post/580894/" rel="noopener noreferrer nofollow">Разработка документации на&nbsp;VuePress</a>. Все хорошо, но&nbsp;есть нюанс&nbsp;— подготавливать графические материалы (например, картинки с&nbsp;выносками над элементами управления) нужно в&nbsp;какой‑нибудь другой программе. К&nbsp;тому&nbsp;же теряется интерактивность. Попробовал Dr.Explain&nbsp;— не&nbsp;впечатлило, хотя что‑то в&nbsp;нем есть: для&nbsp;создания толмутов документации для&nbsp;госструктур наверное годный продукт. Опять&nbsp;же наличие упоминаний «Сделано в&nbsp;Dr.Explain» в&nbsp;бесплатной версии ПО&nbsp;как‑то не&nbsp;очень. Поиски бесплатных аналогичных программ для&nbsp;документирования ничего не&nbsp;дали. В&nbsp;итоге остановился на&nbsp;VuePress.</p>
   <p>И последний штрих&nbsp;— создание небольшого видеоролика <s>про&nbsp;кролика</s> <a href="https://habr.com/ru/company/directum/blog/504130/" rel="noopener noreferrer nofollow">Как&nbsp;снять обучающий видеоролик: 10&nbsp;секретов технического писателя</a>. Захват экрана делаю в&nbsp;CamStudio, а&nbsp;для&nbsp;аудио использую Audacity.</p>
   <p>Тестирование, автотесты, QA&nbsp;— наверное что‑то хорошее, раз так много на&nbsp;Хабре о&nbsp;них часто пишут. Не&nbsp;знаю:)</p>
   <h2>Развертывание приложения</h2>
   <p>Приложение написано, остается поработать немного DevOps:</p>
   <ul>
    <li><p>Собрать проект: в&nbsp;моем случае vue‑cli все делает за&nbsp;меня&nbsp;— минифицирует и склеивает всю кучу моих мелких файлов в&nbsp;несколько больших JS‑ и CSS‑ файлов.</p></li>
    <li><p>Зарегистрировать веб‑домен: при&nbsp;выборе регистратора заметил, что&nbsp;нужно смотреть, сколько будет стоить продление на&nbsp;следующий год, а&nbsp;не&nbsp;первоначальный платеж‑замануха.</p></li>
    <li><p>Оформить SSL‑сертификат: сайты с&nbsp;доступом по&nbsp;http сейчас «не котируются». SSL‑сертификат можно получить у&nbsp;регистратора/хостера (как правило за&nbsp;денежку на&nbsp;год) или, как&nbsp;вариант, раз в 90&nbsp;дней получать его в <a href="https://letsencrypt.org/" rel="noopener noreferrer nofollow">Let's Encrypt</a>.</p></li>
    <li><p>Завести сервер: реальную&nbsp;железку или&nbsp;арендовать виртуальный (виртуальную машину). Мне&nbsp;было проще поднять дома, так как&nbsp;имеется «белый» ip‑адрес, используя небольшой безвентиляторный ПК на&nbsp;базе Celeron J1900&nbsp;/ 4Gb. На&nbsp;него накатил Linux Mint 21, удаленный доступ (tigervnc), node.js и прочие мелочи. Отказоустойчивость данного решения&nbsp;— ну совсем «так‑себе», потом как‑нибудь переделаю.</p></li>
    <li><p>Настроить веб‑сервер, который будет отдавать JS‑файлы: в&nbsp;моем случае&nbsp;— nginx. В&nbsp;случае размещения сервера дома нужно еще пробросить порты на&nbsp;маршрутизаторе.</p></li>
    <li><p>Поднять почтовый сервис для&nbsp;регистрации пользователей и поддержки или&nbsp;воспользоваться готовым (например, я использовал VK WorkSpace с&nbsp;бесплатным базовым тарифом&nbsp;— не&nbsp;знаю, доступен&nbsp;ли тариф сейчас).</p></li>
   </ul>
   <p>Почесать репу дня три и получить <a href="https://survy.ru" rel="noopener noreferrer nofollow">итоговый результат</a>.</p>
   <div class="tm-iframe_temp" data-src="https://embedd.srv.habr.com/iframe/63ee43a661f0ac6fb2634167" data-style="" id="63ee43a661f0ac6fb2634167" width=""></div>
   <p>Для&nbsp;тех, кто не&nbsp;хочет регистрироваться, но&nbsp;желает пощупать&nbsp;— есть тестовая учетная запись: test@survy.ru / 123&nbsp;(просьба не «шалить»).</p>
   <h2>Что впереди?</h2>
   <p>Проект все равно еще на&nbsp;стадии MVP: нужно делать учет дисторсии объективов (тут уже математикой 11&nbsp;класса пахнет), hotkeys, отмену последних действий и&nbsp;т.&nbsp;п.&nbsp;— что&nbsp;уже есть «у всех». Исправление багов также никто не&nbsp;отменял.</p>
   <p>P.&nbsp;S. Для&nbsp;тех кто дочитал: вам фронтендер не&nbsp;нужен?:)</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/fca/685/6ec/fca6856ec5b96aa9f5a0ae49ffa0a801.png" width="884" height="602" data-src="https://habrastorage.org/getpro/habr/upload_files/fca/685/6ec/fca6856ec5b96aa9f5a0ae49ffa0a801.png">
    <figcaption></figcaption>
   </figure>
   <p></p>
  </div>
 </div>
</div> <!----> <!---->