<div>
 <div class="article-formatted-body article-formatted-body article-formatted-body_version-2">
  <div xmlns="http://www.w3.org/1999/xhtml">
   <p>Всем читателям habr.com, привет! Мы студенты Технического ВУЗа- Мария и Екатерина, и хотим рассказать о своем опыте работы с указателями на языке программирования Паскаль.</p>
   <p>Знакомство с указателями произошло еще на первом курсе, когда нам читали предмет по языку программирования Паскаль. Данная тема нас заинтересовала, поэтому мы изучили множество статей и учебной литературы. Отметим, не нашли ни одной, в которой довольно подробно, понятно и, главное, доступно для людей любого уровня знаний было бы рассказано об использование указателей в Паскале. Безусловно, информация по этой теме имеется в интернете, но она разрознена и большинство авторов сложно доносят информацию для неподготовленного читателя, который только начинает путь программиста.</p>
   <p>Как показывает практика, тема указателей сложна для понимания, именно поэтому у нас родилась идея - написать публикацию о работе с динамической памятью и указателями, чтобы любому, увидевшему данную статью, подобная тема стала ясна.</p>
   <h2>Виды памяти в языке программирования Паскаль</h2>
   <p><u>Оперативная память </u>ПК представляет собой <u>совокупность элементарных ячеек</u> для хранения информации — <u>байтов</u>, <u>каждый</u> из которых <u>имеет собственный номер</u>. Эти номера называются адресами, они позволяют обращаться к любому байту памяти.</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/14e/613/c49/14e613c4923b2ff74c5d7ae7e3e4b25d.png" width="601" height="465" data-src="https://habrastorage.org/getpro/habr/upload_files/14e/613/c49/14e613c4923b2ff74c5d7ae7e3e4b25d.png">
    <figcaption></figcaption>
   </figure>
   <p><strong>&nbsp;</strong>Существует много различных видов оперативной памяти. Все эти виды можно разделить на две подгруппы — <u>статическая память</u> (Static RAM) и <u>динамическая память</u> (Dynamic RAM).<strong> </strong>Когда говорится о видах памяти, имеются в виду способы организации работы с ней, включая выделение, освобождение памяти и методы доступа.</p>
   <h2>Статическая память</h2>
   <p><u>Статическая память</u> - это память, которая выделяется до начала работы программы, на стадии компиляции и сборки.</p>
   <p><u>Компиляция</u> - это <u>преобразование программы</u>, составленной на исходном языке высокого уровня <em>(одним из которых является Паскаль - процедурно-ориентированный язык программирования высокого уровня)</em>, <u>в</u> эквивалентную <u>программу</u> <u>на </u>низкоуровневом языке или <u>машинном коде</u> <em>(Машинный код - это двоичные числа, выражающие команды процессора и данные, которые нужно обработать. Его трудно понять и проводить в нем какие-то корректировки).</em></p>
   <p><u>Сборка</u> — процесс получения информационного продукта из исходного кода. Чаще всего сборка — исполняемый файл — двоичный файл, содержащий исполняемый код (машинные инструкции) программы или библиотеки.</p>
   <ul>
    <li><p>статические <u>переменные имеют фиксированный адрес</u>, известный до запуска программы и не изменяющийся в процессе ее работы.</p></li>
    <li><p><u>доступ</u> к статическим переменным <u>осуществляется через их имена</u>.</p></li>
    <li><p>статические программные <u>объекты порождаются автоматически перед выполнением программы</u> или <u>подпрограммы</u>, в которой они описаны, и существуют, пока выполнение этой программы или подпрограммы не завершится. <u>Размер статических объектов</u> <u>не изменяется на протяжении всего времени их существования</u>.</p></li>
   </ul>
   <p>Примером <u>статического объекта</u> в языке Паскаль <u>является переменная</u>, описанная в блоке программы или подпрограммы (процедуры, функции).</p>
   <p>Приведем пример статического объекта:</p>
   <pre><code>var n: integer;
begin
n:=32;
end.</code></pre>
   <p>Такое объявление порождает статическую переменную целого типа.</p>
   <h2>Динамическая память</h2>
   <p><u>Динамическая память</u> - это оперативная память, которая выделяется в процессе компиляции программы. <u>При динамическом размещении</u> <u>заранее не известны </u>ни тип, ни количество размещаемых данных, к ним нельзя обращаться по именам, как к статическим переменным. Программа может захватывать участки динамической памяти нужного размера. После использования ранее захваченный участок динамической памяти следует освободить.</p>
   <p>Под динамическую память <u>отводится пространство между статической памятью и стеком.</u> Обычно <u>стек располагается</u> в старших адресах виртуальной памяти и растет в сторону уменьшения адресов. <u>Программа и константные данные размещаются</u> в младших адресах, выше располагаются статические переменные. Пространство выше статических переменных и ниже стека <u>занимает динамическая память</u>:</p>
   <figure class="">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/8fc/411/847/8fc411847eb0efdf973f3461d62d48f7.png" width="432" height="315" data-src="https://habrastorage.org/getpro/habr/upload_files/8fc/411/847/8fc411847eb0efdf973f3461d62d48f7.png">
    <figcaption></figcaption>
   </figure>
   <p><strong>Динамическую память обычно используют при:</strong></p>
   <ul>
    <li><p>обработке больших массивов данных</p></li>
    <li><p>разработке САПР (Система Автоматизации Проектных Работ)</p></li>
    <li><p>временном сохранение данных при работе с графическими и звуковыми средствами ЭВМ</p></li>
   </ul>
   <p>&nbsp;&nbsp;&nbsp; <u>К таким объектам относят:</u></p>
   <ul>
    <li><p>файлы (текстовые, типизированные, нетипизированные)</p></li>
    <li><p>линейные структуры</p>
     <ul>
      <li><p>односвязные (очередь, стек, список и т.д.)</p></li>
      <li><p>многосвязные (многосвязный список)</p></li>
     </ul></li>
    <li><p>кольцевые структуры (односвязный и многосвязный кольцевые списки)</p></li>
    <li><p>разветвленные структуры (деревья и графы)</p></li>
   </ul>
   <p><u>Управление</u> динамической памятью связано с использованием ссылочного типа данных. Величины, имеющие ссылочный тип, называют <u>указателями</u>.</p>
   <h2>Указатели простейшие действия с ними</h2>
   <p><em><u>Указатель</u></em> <em>-</em> это переменная, которая содержит адрес другой переменной (байта памяти).</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/4a2/0fe/4ea/4a20fe4ea0906d523777dec2e2151826.png" width="684" height="333" data-src="https://habrastorage.org/getpro/habr/upload_files/4a2/0fe/4ea/4a20fe4ea0906d523777dec2e2151826.png">
    <figcaption></figcaption>
   </figure>
   <h2>Объявление указателей</h2>
   <pre><code>var
  p:^integer;</code></pre>
   <p>Где «^» означает, что задаётся указательный тип, а затем идет имя любого стандартного или ранее описанного типа.</p>
   <h2>Операции над указателями</h2>
   <p>Для работы с указателем объявим еще одну переменную, но уже не указательного типа (строка 3).</p>
   <pre><code>var
  p:^integer;
  n:integer;
  k:^integer;
  k1:integer;
  y1:^integer;
  y2:^integer;
  y3:^integer;
begin
  n:=5;
  p:=@n;
  writeln('адрес n:',@n);
  writeln('значение p:',n);
  writeln('адрес p:',@p);
  writeln('значение p:',p);
  writeln('Разыменование или получения значения по адресу,который содержит p в качестве значения:',p^);
  k:=@k1;
  k^:=9;
  writeln('Разыменование или получения значения по адресу,который содержит k в качестве значения:',k^);
  writeln();
  If k^=p^ then
    begin
    writeln('значения переменных, расположенных по разным адресам, одинаковое');
    writeln('значение p:',p);
    writeln('значение k:',k);
    end;
    
  If k^&lt;&gt;p^ then
    begin
    writeln('значения переменных, расположенных по разным адресам, разные');
    writeln('Разыменование k:',k^);
    writeln('Разыменование p:',p^);
    end;
    
    writeln();
    y2:=@n;
    y1:=y2;
    writeln('Разыменование y1:',y1^);
    writeln('Разыменование y2:',y2^);
    writeln();
    y3:=nil;
    writeln('Значение y3:',y3);
    
 end.</code></pre>
   <ul>
    <li><p>В строках 11, 12, 14, 17, 36: мы получаем адрес переменной, используя символ <strong>«@»</strong>.</p></li>
    <li><p>В строках 16, 19, 21, 28 и т.д.: мы получаем значение переменной по её адресу, используя символ <strong>«^»</strong>. Данная операция называется <strong><em><u>«разыменование»</u></em></strong>.</p><p><em>(Разыменование&nbsp;&nbsp;это&nbsp;операция&nbsp;получения&nbsp;значения&nbsp;объекта,&nbsp;адрес&nbsp;которого&nbsp;хранится&nbsp;в&nbsp;указателе).</em></p><p>Добавим в нашу программу две переменные: типа указатель - k и целое k1 (строки 4,5).</p></li>
    <li><p>В строках 10, 11, 17 и т.д.: мы используем операцию <u>«</u><strong><em><u>присваивания»</u></em></strong><u>.</u></p><p><u>Присвоить можно:</u></p>
     <ol>
      <li><p>значение того же типа, что и указатель (строка 36, 37)</p></li>
     </ol>
     <figure class="">
      <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/73b/47e/eb1/73b47eeb1362f7a78189e639163a20a7.png" alt="Результат работы программы" title="Результат работы программы" width="160" height="41" data-src="https://habrastorage.org/getpro/habr/upload_files/73b/47e/eb1/73b47eeb1362f7a78189e639163a20a7.png">
      <figcaption>
       Результат работы программы
      </figcaption>
     </figure>
     <ol start="2">
      <li><p>адрес другой переменной (строка 11, 17)</p></li>
      <li><p>специальное значение, которое называется пустой указатель и обозначается служебным словом <strong>nil</strong> (<em>Оно не связано ни с каким объектом, т.е. ни на что фактически не указывает, строка 41)</em></p>
       <figure class="">
        <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/52f/49d/c4a/52f49dc4ae3e2f91f4b247e6a75f0553.png" alt="Результат работы программы" title="Результат работы программы" width="148" height="38" data-src="https://habrastorage.org/getpro/habr/upload_files/52f/49d/c4a/52f49dc4ae3e2f91f4b247e6a75f0553.png">
        <figcaption>
         Результат работы программы
        </figcaption>
       </figure></li>
      <li><p>значение типа, на который указывает указатель (строка 18)</p></li>
     </ol></li>
   </ul>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/36b/55b/14e/36b55b14e5c535ca5cb916e5dd7173fa.png" alt="Результат работы программы" title="Результат работы программы" width="966" height="189" data-src="https://habrastorage.org/getpro/habr/upload_files/36b/55b/14e/36b55b14e5c535ca5cb916e5dd7173fa.png">
    <figcaption>
     Результат работы программы
    </figcaption>
   </figure>
   <ul>
    <li><p>В строке 21: мы сравниваем указатели на <u>«</u><strong><em><u>равенство»</u></em></strong>.</p></li>
   </ul>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/d3e/330/c58/d3e330c58a2fde1fc1514b18a00f8699.png" alt="" title="" width="566" height="55" data-src="https://habrastorage.org/getpro/habr/upload_files/d3e/330/c58/d3e330c58a2fde1fc1514b18a00f8699.png">
    <figcaption></figcaption>
   </figure>
   <ul>
    <li><p>В строке 28: мы сравниваем указатели на <u>«</u><strong><em><u>неравенство»</u></em></strong>.<strong> </strong></p></li>
   </ul>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/fe3/d3c/c6c/fe3d3cc6c68b5114304abdd56c2cb424.png" width="602" height="72" data-src="https://habrastorage.org/getpro/habr/upload_files/fe3/d3c/c6c/fe3d3cc6c68b5114304abdd56c2cb424.png">
    <figcaption></figcaption>
   </figure>
   <h2>Процедуры для работы с указателями</h2>
   <p>Первым шагом после объявления переменной типа указатель (строка 2) является <strong><em><u>процедура выделения памяти</u>, </em></strong>которая обозначается <strong>new(указатель)</strong>.<strong><em> </em></strong>Данная процедура имеет один параметр<em> </em>(строка 4).</p>
   <pre><code>var
  p:^integer;
begin
  new(p);
end.</code></pre>
   <p>После применения процедуры <strong>new</strong> под переменную <strong>p</strong> <em><u>выделилась память</u></em>.</p>
   <p>*<em>Для более лучшего усвоения материала будем графически изображать указатели. На схеме точка будет ставиться точка у указателя и рисоваться стрелка для связывания его с соответствующим объектом.</em></p>
   <p>Объект, созданный с помощью <strong>new</strong> в процессе выполнения программы или подпрограммы, существует вплоть до завершения основной программы, или до тех пор, пока он не будет уничтожен явно. При создании объекта указатель на него помещается в переменную, являющуюся фактическим параметром оператора вызова процедуры <strong>new</strong>.</p>
   <p>В начальный момент выполнения программы переменная p не имеет никакого значения:</p>
   <figure class="">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/ae7/7e1/a35/ae77e1a35fdf0364956fe4fab4eb5f0d.png" width="140" height="42" data-src="https://habrastorage.org/getpro/habr/upload_files/ae7/7e1/a35/ae77e1a35fdf0364956fe4fab4eb5f0d.png">
    <figcaption></figcaption>
   </figure>
   <p>После создания динамического объекта указатель на него автоматически присваивается переменной p. Схематично результат изображается следующим образом:</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/32b/615/e46/32b615e4674c6ce87108a6cea0f49000.png" width="641" height="146" data-src="https://habrastorage.org/getpro/habr/upload_files/32b/615/e46/32b615e4674c6ce87108a6cea0f49000.png">
    <figcaption></figcaption>
   </figure>
   <p><u>Переменная </u><strong><u>p</u></strong><u> теперь "указывает" на объект целого типа</u>, поэтому саму указательную переменную тоже называют указателем. Заметим, что параметр процедуры <strong>new</strong> однозначно определяет, какого типа объект порождается. В данном случае из описания типа переменной p следует, что порождается объект типа integer. Отметим, что <em><u>порождаемые объекты не имеют никакого начального значения</u>.</em></p>
   <p>Для освобождения динамического памяти, на которую указывает указатель применяется <strong><em><u>процедура удаления</u></em></strong><u> </u><strong><u>dispose(указатель)</u> (строка 8)</strong>. Параметр в этой процедуре<strong> </strong>должен быть указатель на уже существующий динамический объект, иначе возникнет ошибка.</p>
   <pre><code>var
  p:^integer;
begin
  new(p);
  writeln('Адрес указателя: ',@p);
  writeln('Значение указателя: ',p);
  writeln('Разыменование указателя: ',p^);
  dispose(p);
  writeln();
  writeln('Адрес указателя после удаления: ',@p);
  writeln('Значение указателя после удаления: ',p);
  end.</code></pre>
   <figure class="">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/be4/31e/3e1/be431e3e115d8cc6e125042b6cf5c43a.png" alt="Результат работы программы " title="Результат работы программы " width="366" height="128" data-src="https://habrastorage.org/getpro/habr/upload_files/be4/31e/3e1/be431e3e115d8cc6e125042b6cf5c43a.png">
    <figcaption>
     Результат работы программы
    </figcaption>
   </figure>
   <p>После применения объект, указанный в качестве фактического параметра перестает существовать, a указатель на него удаляется из множества значений указательного типа, в результате чего все переменные, содержащие указатель на уничтоженный объект, становятся неопределёнными.</p>
   <p>Следует помнить, что повторное применение процедуры <strong>dispose</strong> к свободному указателю может привести к ошибке.</p>
   <h2>Достоинства и недостатки указателей</h2>
   <ol>
    <li><p><strong>Достоинства указателей</strong></p>
     <ul>
      <li><p>уменьшают объем памяти и сокращает время выполнения программы</p></li>
      <li><p>позволяют возвращать несколько значений из функции и могут использоваться для передачи информации между функциями</p></li>
      <li><p>дают возможность изменить размер динамически выделенного блока памяти</p></li>
      <li><p>позволяют получить доступ к любой ячейки памяти компьютера</p></li>
      <li><p>помогают создавать сложные структуры данных, такие как связанный список, стек, очереди, деревья, графики и т.д.</p></li>
     </ul></li>
    <li><p><strong>Недостатки указателей</strong></p>
     <ul>
      <li><p>выделенный динамически блок памяти необходимо освобождать явно, иначе может произойти утечка памяти</p></li>
      <li><p>повышают вероятность возникновения ошибок и проблем с памятью. При этом найти и исправить эти ошибки задача не из легких, особенно в объемных программах</p></li>
      <li><p>сложны для понимания и требуют определенного объема знаний. Программист несет ответственность за эффективное и правильное использование указателей</p></li>
     </ul></li>
   </ol>
   <h2>Для чего нужны указатели?</h2>
   <p>Если нет особой необходимости использовать указатели, лучше выбирать альтернативный вариант, который практически всегда присутствует. Например, использование ссылок.</p>
   <ol>
    <li><p><strong>Для того, чтобы напрямую работать с памятью</strong></p><p>Указатели нужны для того, чтобы можно было напрямую работать с&nbsp;оперативной памятью.</p><p>Например, при передаче указателя в функцию компьютер не&nbsp;создаёт её&nbsp;локальную копию, а&nbsp;обращается к&nbsp;ней напрямую.</p></li>
    <li><p><strong>Для динамического управления памятью</strong></p><p>Если нам нужно выделить в&nbsp;памяти некоторую область для хранения своих данных, но&nbsp;стандартные переменные нам не&nbsp;подходят, мы&nbsp;можем использовать указатель. В&nbsp;этом случае мы&nbsp;помещаем в&nbsp;него стартовый адрес ячейки и&nbsp;говорим, сколько байтов после него нужно использовать и&nbsp;что в&nbsp;них положить.</p></li>
   </ol>
   <h2>Задачи с применением указателей</h2>
   <ol>
    <li><p><strong>Через указатели на указатели посчитать сумму двух чисел и записать в третье. </strong></p></li>
   </ol>
   <pre><code>var
  num_1, num_2:integer; //два числа, значения которых будут использоваться в сложении 
  sum:integer; //переменная для сохранения рез-та сложения
  x, y:^integer; //переменные для хранения адресов двух чисел
  x1:^^integer; //первое слагаемое
  y1:^^integer; //второе слагаемое

begin
//занесение в переменные числовых значений
num_1:=1;
num_2:=2;
//присваивание переменным типа указатель в кач-ве значения адресов переменных целевого типа
x:=@num_1;
y:=@num_2;
//присваивание переменным типа указатель на указатель в кач-ве значения адресов переменных типа указатель
x1:=@x;
y1:=@y;
//суммирование двух чисел, это получается за счет двойного разыменования переменной типа указатель на указатель на тип integer
sum:=x1^^+y1^^;
writeln('сумма:',sum); 
end.
</code></pre>
   <ol start="2">
    <li><p><strong>Напишите функцию swap, которая меняет значения переданных аргументов.</strong></p><p>В Pascal существуют два типа подпрограмм: процедуры и функции (служебные слова: procedure, function). Процедуры после выполнения не возвращают никакое значение из подпрограммы, а функция возвращает результат. При написании подпрограмм важным этапом выступает передача параметров. Выделяют <strong>параметры-значения</strong> и <strong>параметры-переменные.</strong></p>
     <ul>
      <li><p><strong>Параметры-значения</strong></p><p>При этом в формальные параметры подпрограммы передаются копии фактических. Перед формальными параметрами нет слова <strong><em>Var</em></strong>. С такими параметрами удобно работать, так как при вызове подпрограммы на их место можно подставить не только переменную, но и константу или выражение. Даже если внутри подпрограммы значение такого параметра меняется, при выходе из нее оно восстанавливается (так как меняется значение не самого параметра, а его копии).</p></li>
      <li><p><strong>Параметры-переменные</strong></p><p>При этом в формальные параметры подпрограммы передаются адреса фактических. Фактические значения по указанному адресу меняются. Перед формальными параметрами указывается слово <strong><em>Var</em>.</strong></p><p>Пример передача значений в подпрограмму со словом <strong><em>var</em></strong> есть в задаче 2.</p></li>
     </ul></li>
   </ol>
   <pre><code>//Создаем два указателя на целое число и две переменные типа целое число
var
    p1:^integer;
    p2:^integer;
    x:integer;
    y:integer;
    
{Процедура меняет местами значения двух переменных;
 Входные параметры: две целые переменные;}
procedure Swap(var a,b:integer);
//Создаем временную переменную типа целое
var temp:integer;
begin
  //Присваиваем temp значение первой переменной
  temp:=a;
  //Присваиваем первой переменной значение второй
  a:=b;
  //Присваиваем второй переменной значение temp
  b:=temp;
end;

begin
    //Присваиваем целое значение переменным
    x:=5;
    y:=8;
    //Инициализируем указатели
    p1:=@x;
    p2:=@y;
    //Вызываем процедуру, которая меняет местами значения двух переменных, используя операцию разыменовывание
    Swap(p1^, p2^);
    writeln (p1^);
    writeln(p2^);
end.</code></pre>
   <h2>Заключение</h2>
   <p>В данной статье мы попытались на собственном опыте изучения&nbsp;<strong>указателей в Паскале</strong>&nbsp;поделиться полученными знаниями и простым языком объяснить базовые понятия, подкрепив их примерами и схемами. Если вы разобрались в теме указателей: получили новые знания или освежили в памяти ранее изученное, значит, цель статьи достигнута</p>
   <p>Конечно, мы рассказали не все об указателях и их возможностях. Надеемся, что данная статья помогла Вам найти ответы на интересующие вопросы по рассматриваемой теме и побудила к дальнейшему, более глубокому, изучению указателей не только на языке Паскаль, но и применению их в любых своих программах. До встречи в будущих статьях :)</p>
  </div>
 </div>
</div> <!----> <!---->