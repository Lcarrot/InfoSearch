<div>
 <div class="article-formatted-body article-formatted-body article-formatted-body_version-2">
  <div xmlns="http://www.w3.org/1999/xhtml">
   <p>Привет Хабр!</p>
   <p>В своей предыдущей <a href="https://habr.com/ru/post/716292/" rel="noopener noreferrer nofollow">статье</a> про разбор кода победившего в VK Cup'22/23 я описывал как мне удалось ускорить копирование одной картинки в другую в 30 раз с помощью чёрной магии <code>unsafe</code>. Однако я не переставал задаваться вопросом, можно ли увеличить скорость еще больше. Я даже привлёк OpenAI в поисках решения, но он мне помог только с картинкой для обложки статьи. В итоге я нашел способ улучшить код еще в 2 раза. Чем и хочу поделиться.</p>
   <h2>Задача</h2>
   <p>Изначально задача была в построение коллажа из нескольких картинок размером 512x512px, которая свелась к задаче по копированию синей составляющей картинки <code>image.RGBA</code> в индекс цвета палитры в <code>image.Paletted</code>. Для целей исследования я упростил задачу до: надо скопировать синюю составляющую из картинки <code>image.RGBA</code> размером 512x512px в <code>image.Paletted</code> такого же размера.</p>
   <p>Решение с использованием методов пакета image выглядит так:</p>
   <pre><code class="go">func BenchmarkCopySTD(b *testing.B) {
	for i := 0; i &lt; b.N; i++ {
		for y := 0; y &lt; imageHeight; y++ {
			dstPixOffset := dstPaletted.PixOffset(0, y)
			for x := 0; x &lt; imageWidth; x++ {
				_, _, b, _ := srcRGBA.At(x, y).RGBA()
				dstPaletted.Pix[dstPixOffset+x] = uint8(b)
			}
		}
	}
}</code></pre>
   <p>Оно долгое, много времени тратится на вызовы <code>At()</code>. Типы картинок нам известны, поэтому очевидное решение работать напрямую с пикселами:</p>
   <pre><code class="go">func BenchmarkCopySliceElements(b *testing.B) {
	for i := 0; i &lt; b.N; i++ {
		for y := 0; y &lt; imageHeight; y++ {
			srcPixOffset := srcRGBA.PixOffset(0, y)
			dstPixOffset := dstPaletted.PixOffset(0, y)
			for x := 0; x &lt; imageWidth; x++ {
				dstPaletted.Pix[dstPixOffset+x] = srcRGBA.Pix[srcPixOffset+x*4+1]
			}
		}
	}
}</code></pre>
   <p>Сразу получаем большой буст:</p>
   <pre><code>BenchmarkCopySTD-16                	    1590	   3730930 ns/op	 1048600 B/op	  262144 allocs/op
BenchmarkCopySliceElements-16      	   22778	    260128 ns/op	       0 B/op	       0 allocs/op</code></pre>
   <p>Дальше начинается чёрная магия <code>unsafe</code>.</p>
   <h2>Избавляемся от Bounds Check</h2>
   <p>Если посмотреть на ассемблер, то можно сильно удивиться количеству операций необходимых для копирования одного элемента слайса в другой:</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/ad0/12a/ca1/ad012aca1989cb10ab4c8aafe1b798b0.png" width="1012" height="554" data-src="https://habrastorage.org/getpro/habr/upload_files/ad0/12a/ca1/ad012aca1989cb10ab4c8aafe1b798b0.png">
    <figcaption></figcaption>
   </figure>
   <p>На самом деле это проверка на невыход за границы слайса. Её можно отключить глобально при компиляции, но в данном случае нам надо её отключить только в одном месте программы. Для этого нужно обращаться напрямую по адресу нужного элемента, вычислить который можно используя адрес нулевого элемента. Переписанный код выглядит так:</p>
   <pre><code class="go">func BenchmarkCopyUnsafe(b *testing.B) {
	for i := 0; i &lt; b.N; i++ {
		dstAddr := uintptr(unsafe.Pointer(&amp;dstPaletted.Pix[0]))
		srcAddr := uintptr(unsafe.Pointer(&amp;srcRGBA.Pix[0]))
		for y := 0; y &lt; imageHeight; y++ {
			srcPixOffset := srcRGBA.PixOffset(0, y)
			dstPixOffset := dstPaletted.PixOffset(0, y)
			for x := 0; x &lt; imageWidth; x++ {
				//dst.Pix[dstPixOffset+x] = src.Pix[srcPixOffset+x*4+1]
				*(*uint8)((unsafe.Pointer)(dstAddr + uintptr(dstPixOffset+x))) = *(*uint8)((unsafe.Pointer)(srcAddr + uintptr(srcPixOffset+x*4+2)))
			}
		}
	}
}</code></pre>
   <p>В строках (3) и (4) получаем адреса в памяти нулевых элементов, а дальше обращаемся к ним по смещению относительно адреса. Время на копирование сократилось в 2 раза:</p>
   <pre><code>BenchmarkCopySTD-16                	    1590	   3730930 ns/op	 1048600 B/op	  262144 allocs/op
BenchmarkCopySliceElements-16      	   22778	    260128 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnsafe-16             	   44539	    131881 ns/op	       0 B/op	       0 allocs/op
</code></pre>
   <p>Количество инструкций CPU сильно уменьшилось:</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/fae/e68/0c6/faee680c6acf503c66bfa4e1a2671dfa.png" width="1012" height="419" data-src="https://habrastorage.org/getpro/habr/upload_files/fae/e68/0c6/faee680c6acf503c66bfa4e1a2671dfa.png">
    <figcaption></figcaption>
   </figure>
   <p>Такое решение было отправлено на конкурс, но количество инструкций меня всё ещё смущало и уже после конкурса я начал искать пути как это можно ускорить.</p>
   <h2>Избавляемся от сложной математики</h2>
   <p>Первое что бросается в глаза, это умножение. Плюс при работе с памятью напрямую можно не вычислять смещение, а просто жонглировать указателями:</p>
   <pre><code class="go">func BenchmarkCopyUnsafeV2(b *testing.B) {
	for i := 0; i &lt; b.N; i++ {
		dstAddr := uintptr(unsafe.Pointer(&amp;dstPaletted.Pix[0]))
		srcAddr := uintptr(unsafe.Pointer(&amp;srcRGBA.Pix[0])) + 2
		for y := 0; y &lt; imageHeight; y++ {
			for x := 0; x &lt; imageWidth; x++ {
				*(*uint8)((unsafe.Pointer)(dstAddr)) = *(*uint8)((unsafe.Pointer)(srcAddr))
				dstAddr++
				srcAddr += 4
			}
		}
	}
}</code></pre>
   <p>Время ещё сократилось в 1.5 раза:</p>
   <pre><code>BenchmarkCopySTD-16                	    1590	   3730930 ns/op	 1048600 B/op	  262144 allocs/op
BenchmarkCopySliceElements-16      	   22778	    260128 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnsafe-16             	   44539	    131881 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnsafeV2-16           	   65779	     88408 ns/op	       0 B/op	       0 allocs/op</code></pre>
   <p>Инструкций CPU осталось минимум:</p>
   <figure class="full-width ">
    <img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c78/c32/1e2/c78c321e2bf69b891b3fb297e9bd3023.png" width="1012" height="259" data-src="https://habrastorage.org/getpro/habr/upload_files/c78/c32/1e2/c78c321e2bf69b891b3fb297e9bd3023.png">
    <figcaption></figcaption>
   </figure>
   <p>Кажется что всё, быстрее быть не может, но ...</p>
   <h2>Loop unrolling</h2>
   <p>В какой-то момент я подумал, а чтобы сделал C++ компилятор с <code>-O3</code> и это меня натолкнуло на мысль, почему Go не сделал оптимизацию "<a href="https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D0%B7%D0%BC%D0%BE%D1%82%D0%BA%D0%B0_%D1%86%D0%B8%D0%BA%D0%BB%D0%B0" rel="noopener noreferrer nofollow">Размотка цикла</a>"? Надо попробовать сделать руками:</p>
   <pre><code class="go">func BenchmarkCopyUnrolledLoop4(b *testing.B) {
	for i := 0; i &lt; b.N; i++ {
		dstAddr := uintptr(unsafe.Pointer(&amp;dstPaletted.Pix[0]))
		srcAddr := uintptr(unsafe.Pointer(&amp;srcRGBA.Pix[0]))
		for y := 0; y &lt; imageHeight; y++ {
			for x := 0; x &lt; imageWidth; x += 4 {
				*(*uint8)((unsafe.Pointer)(dstAddr + 0)) = *(*uint8)((unsafe.Pointer)(srcAddr + 0))
				*(*uint8)((unsafe.Pointer)(dstAddr + 1)) = *(*uint8)((unsafe.Pointer)(srcAddr + 4))
				*(*uint8)((unsafe.Pointer)(dstAddr + 2)) = *(*uint8)((unsafe.Pointer)(srcAddr + 8))
				*(*uint8)((unsafe.Pointer)(dstAddr + 3)) = *(*uint8)((unsafe.Pointer)(srcAddr + 12))

				dstAddr += 4
				srcAddr += 16
			}
		}
	}
}</code></pre>
   <p>И это ускорило ещё на треть. На самом деле я попробовал разные количество операций за 1 цикл, включая все 512 px, но самый лучший результат, по крайней мере на моём CPU, показал вариант с 4 операциями:</p>
   <pre><code>BenchmarkCopySTD-16                	    1590	   3730930 ns/op	 1048600 B/op	  262144 allocs/op
BenchmarkCopySliceElements-16      	   22778	    260128 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnsafe-16             	   44539	    131881 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnsafeV2-16           	   65779	     88408 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnrolledLoop2-16      	   88812	     66479 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnrolledLoop4-16      	   95296	     58995 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnrolledLoop8-16      	   95563	     62937 ns/op	       0 B/op	       0 allocs/op
BenchmarkCopyUnrolledLoop512-16    	   95064	     62808 ns/op	       0 B/op	       0 allocs/op</code></pre>
   <h2>Заключение</h2>
   <p>Кажется здесь мне можно остановиться, ускорение в 63 раза относительно вызова функций и в почти 4.5 раза относительно копированию элементов по индексам выглядит неплохо. Дальше можно попробовать поиграться с векторными командами, возможно в следующий раз. Но для желающих я сделал задачу на <a href="https://highload.fun/tasks/17/" rel="noopener noreferrer nofollow">HighLoad.Fun</a>, где можно попробовать свои силы и ещё ускорить код, причём не только на Go, но и на C++ или Rust.</p>
   <p>P.S. Ради интереса я спросил у ChatGPT как можно ускорить BenchmarkCopySliceElements, он предложил:</p>
   <ol>
    <li><p>Использовать горутины, в моём случае нерелевантно, т.к. остальные ядра CPU уже заняты той же работой для других картинок.</p></li>
    <li><p>Использовать SIMD, но работающего решения не предложил.</p></li>
    <li><p>Предложил использовать более быструю библиотеку для работы с картинками, но какую не сказал.</p></li>
    <li><p>После уточняющих вопросов, предложил развернуть цикл, но я и так это уже сделал.</p></li>
   </ol>
   <p></p>
  </div>
 </div>
</div> <!----> <!---->